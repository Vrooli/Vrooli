import { timeFrameToPrisma, visibilityBuilder } from "../builders";
const oneToOneId = (id, relField) => ({ [relField]: { id } });
const oneToOneIds = (ids, relField) => ({ [relField]: { id: { in: ids } } });
const oneToManyId = (id, relField) => ({ [relField]: { some: { id } } });
const oneToManyIds = (ids, relField) => ({ [relField]: { some: { id: { in: ids } } } });
export const SearchMap = {
    apiId: (id) => oneToOneId(id, "api"),
    apisId: (id) => oneToManyId(id, "apis"),
    apiVersionId: (id) => oneToOneId(id, "apiVersion"),
    apiVersionsId: (id) => oneToManyId(id, "apiVersions"),
    cardLast4: (cardLast4) => ({ cardLast4 }),
    commentId: (id) => oneToOneId(id, "comment"),
    commentsId: (id) => oneToManyId(id, "comments"),
    completedTimeFrame: (time) => timeFrameToPrisma("completedAt", time),
    closedById: (id) => oneToOneId(id, "closedBy"),
    createdById: (id) => oneToOneId(id, "createdBy"),
    createdByIdRoot: (id) => ({ root: oneToOneId(id, "createdBy") }),
    createdTimeFrame: (time) => timeFrameToPrisma("created_at", time),
    currency: (currency) => ({ currency }),
    directoryListingsId: (id) => oneToManyId(id, "directoryListings"),
    endTimeFrame: (time) => timeFrameToPrisma("endTime", time),
    excludeIds: (ids) => ({ NOT: { id: { in: ids } } }),
    excludeLinkedToTag: (exclude) => exclude === true ? { tagId: null } : {},
    focusModeId: (id) => oneToOneId(id, "focusMode"),
    focusModesId: (id) => oneToManyId(id, "focusModes"),
    fromId: (id) => oneToOneId(id, "from"),
    hasAcceptedAnswer: (hasAcceptedAnswer) => ({ hasAcceptedAnswer }),
    hasCompleteVersion: (hasCompleteVersion) => ({ hasCompleteVersion }),
    ids: (ids) => ({ id: { in: ids } }),
    isComplete: (isComplete) => ({ isComplete }),
    isCompleteWithRoot: (isComplete) => ({
        AND: [
            { isComplete },
            { root: { hasCompleteVersion: isComplete } },
        ],
    }),
    isCompleteWithRootExcludeOwnedByOrganizationId: (ownedByOrganizationId) => ({
        OR: [
            { ownedByOrganizationId },
            {
                AND: [
                    { isComplete: true },
                    { root: { hasCompleteVersion: true } },
                ],
            },
        ],
    }),
    isCompleteWithRootExcludeOwnedByUserId: (ownedByUserId) => ({
        OR: [
            { ownedByUserId },
            {
                AND: [
                    { isComplete: true },
                    { root: { hasCompleteVersion: true } },
                ],
            },
        ],
    }),
    isInternal: (isInternal) => ({ isInternal }),
    isInternalWithRoot: (isInternal) => ({ root: { isInternal } }),
    isInternalWithRootExcludeOwnedByOrganizationId: (ownedByOrganizationId) => ({
        OR: [
            { ownedByOrganizationId },
            { root: { isInternal: true } },
        ],
    }),
    isInternalWithRootExcludeOwnedByUserId: (ownedByUserId) => ({
        OR: [
            { ownedByUserId },
            { root: { isInternal: true } },
        ],
    }),
    isExternalWithRootExcludeOwnedByOrganizationId: (ownedByOrganizationId) => ({
        OR: [
            { ownedByOrganizationId },
            { root: { isInternal: false } },
        ],
    }),
    isExternalWithRootExcludeOwnedByUserId: (ownedByUserId) => ({
        OR: [
            { ownedByUserId },
            { root: { isInternal: false } },
        ],
    }),
    isMergedOrRejected: (isMergedOrRejected) => ({ isMergedOrRejected }),
    isOpenToNewMembers: (isOpenToNewMembers) => ({ isOpenToNewMembers }),
    isPinned: (isPinned) => ({ isPinned }),
    issueId: (id) => oneToOneId(id, "issue"),
    issuesId: (id) => oneToManyId(id, "issues"),
    label: (label) => ({ label }),
    labelsId: (id) => ({ labels: { some: { label: { id } } } }),
    labelsIds: (ids) => ({ labels: { some: { label: { id: { in: ids } } } } }),
    languageIn: (languages) => ({ language: { in: languages } }),
    lastViewedTimeFrame: (time) => timeFrameToPrisma("lastViewedAt", time),
    listId: (id) => oneToOneId(id, "list"),
    maxAmount: (amount) => ({ amount: { lte: amount } }),
    maxBookmarks: (bookmarks) => ({ bookmarks: { lte: bookmarks } }),
    maxBookmarksRoot: (bookmarks) => ({ root: { bookmarks: { lte: bookmarks } } }),
    maxComplexity: (complexity) => ({ complexity: { lte: complexity } }),
    maxEventEnd: (end) => ({ endTime: { lte: end } }),
    maxEventStart: (start) => ({ startTime: { lte: start } }),
    maxPointsEarned: (pointsEarned) => ({ pointsEarned: { lte: pointsEarned } }),
    maxRecurrEnd: (end) => ({ recurrEnd: { lte: end } }),
    maxRecurrStart: (start) => ({ recurrStart: { lte: start } }),
    maxScore: (score) => ({ score: { lte: score } }),
    maxScoreRoot: (score) => ({ root: { score: { lte: score } } }),
    maxSimplicity: (simplicity) => ({ simplicity: { lte: simplicity } }),
    maxTimesCompleted: (timesCompleted) => ({ timesCompleted: { lte: timesCompleted } }),
    maxViews: (views) => ({ views: { lte: views } }),
    maxViewsRoot: (views) => ({ root: { views: { lte: views } } }),
    memberUserIds: (ids) => ({ members: { some: { user: { id: { in: ids } } } } }),
    meetingId: (id) => oneToOneId(id, "meeting"),
    meetingsId: (id) => oneToManyId(id, "meetings"),
    minAmount: (amount) => ({ amount: { gte: amount } }),
    minBookmarks: (bookmarks) => ({ bookmarks: { gte: bookmarks } }),
    minBookmarksRoot: (bookmarks) => ({ root: { bookmarks: { gte: bookmarks } } }),
    minComplexity: (complexity) => ({ complexity: { gte: complexity } }),
    minEventEnd: (end) => ({ endTime: { gte: end } }),
    minEventStart: (start) => ({ startTime: { gte: start } }),
    minPointsEarned: (pointsEarned) => ({ pointsEarned: { gte: pointsEarned } }),
    minRecurrEnd: (end) => ({ recurrEnd: { gte: end } }),
    minRecurrStart: (start) => ({ recurrStart: { gte: start } }),
    minScore: (score) => ({ score: { gte: score } }),
    minScoreRoot: (score) => ({ root: { score: { gte: score } } }),
    minSimplicity: (simplicity) => ({ simplicity: { gte: simplicity } }),
    minTimesCompleted: (timesCompleted) => ({ timesCompleted: { gte: timesCompleted } }),
    minViews: (views) => ({ views: { gte: views } }),
    minViewsRoot: (views) => ({ root: { views: { gte: views } } }),
    nodeType: (nodeType) => nodeType ? ({ nodeType: { contains: nodeType.trim(), mode: "insensitive" } }) : {},
    noteId: (id) => oneToOneId(id, "note"),
    notesId: (id) => oneToManyId(id, "notes"),
    noteVersionId: (id) => oneToOneId(id, "noteVersion"),
    noteVersionsId: (id) => oneToManyId(id, "noteVersions"),
    objectId: (id) => oneToOneId(id, "object"),
    objectType: (objectType) => objectType ? ({ objectType: { contains: objectType.trim(), mode: "insensitive" } }) : {},
    openToAnyoneWithInvite: () => ({ openToAnyoneWithInvite: true }),
    organizationId: (id) => oneToOneId(id, "organization"),
    organizationsId: (id) => oneToManyId(id, "organizations"),
    ownedByOrganizationId: (id) => oneToOneId(id, "ownedByOrganization"),
    ownedByOrganizationIdRoot: (id) => ({ root: oneToOneId(id, "createdBy") }),
    ownedByUserId: (id) => oneToOneId(id, "ownedByUser"),
    ownedByUserIdRoot: (id) => ({ root: oneToOneId(id, "createdBy") }),
    parentId: (id) => oneToOneId(id, "parent"),
    periodTimeFrame: (time) => timeFrameToPrisma("periodEnd", time),
    periodType: (periodType) => ({ periodType }),
    postId: (id) => oneToOneId(id, "post"),
    postsId: (id) => oneToManyId(id, "posts"),
    projectId: (id) => oneToOneId(id, "project"),
    projectsId: (id) => oneToManyId(id, "projects"),
    projectVersionId: (id) => oneToOneId(id, "projectVersion"),
    projectVersionsId: (id) => oneToManyId(id, "projectVersions"),
    pullRequestId: (id) => oneToOneId(id, "pullRequest"),
    pullRequestsId: (id) => oneToManyId(id, "pullRequests"),
    questionId: (id) => oneToOneId(id, "question"),
    questionsId: (id) => oneToManyId(id, "questions"),
    questionAnswerId: (id) => oneToOneId(id, "questionAnswer"),
    questionAnswersId: (id) => oneToManyId(id, "questionAnswers"),
    quizId: (id) => oneToOneId(id, "quiz"),
    quizAttemptId: (id) => oneToOneId(id, "quizAttempt"),
    quizQuestionId: (id) => oneToOneId(id, "quizQuestion"),
    recurrEndTimeFrame: (time) => timeFrameToPrisma("recurrEnd", time),
    recurrStartTimeFrame: (time) => timeFrameToPrisma("recurrStart", time),
    referencedVersionId: (id) => ({ referencedVersionId: id }),
    reminderListId: (id) => oneToOneId(id, "reminderList"),
    repostedFromIds: (ids) => oneToManyIds(ids, "repostedFrom"),
    reportId: (id) => oneToOneId(id, "report"),
    reportsId: (id) => oneToManyId(id, "reports"),
    resourceListId: (id) => oneToOneId(id, "resourceList"),
    resourceListsId: (id) => oneToManyId(id, "resourceLists"),
    responseId: (id) => oneToOneId(id, "response"),
    rootId: (id) => oneToOneId(id, "root"),
    routineId: (id) => oneToOneId(id, "routine"),
    routineIds: (ids) => oneToOneIds(ids, "routine"),
    routinesId: (id) => oneToManyId(id, "routines"),
    routinesIds: (ids) => oneToManyIds(ids, "routines"),
    routineVersionId: (id) => oneToOneId(id, "routineVersion"),
    routineVersionsId: (id) => oneToManyId(id, "routineVersions"),
    runProjectOrganizationId: (id) => ({ runProject: { organization: { id } } }),
    runProjectUserId: (id) => ({ runProject: { user: { id } } }),
    runRoutineOrganizationId: (id) => ({ runRoutine: { organization: { id } } }),
    runRoutineUserId: (id) => ({ runRoutine: { user: { id } } }),
    scheduleEndTimeFrame: (time) => ({ schedule: timeFrameToPrisma("endTime", time) }),
    scheduleStartTimeFrame: (time) => ({ schedule: timeFrameToPrisma("startTime", time) }),
    scheduleForUserId: (userId) => userId ? ({
        focusModes: {
            some: {
                user: {
                    id: userId,
                },
            },
        },
        meetings: {
            some: {
                OR: [
                    {
                        organization: {
                            members: {
                                some: {
                                    user: {
                                        id: userId,
                                    },
                                },
                            },
                        },
                    },
                    {
                        invites: {
                            some: {
                                user: {
                                    id: userId,
                                },
                            },
                        },
                    },
                    {
                        attendees: {
                            some: {
                                user: {
                                    id: userId,
                                },
                            },
                        },
                    },
                ],
            },
        },
        runProjects: {},
        runRoutines: {},
    }) : {},
    showOnOrganizationProfile: () => ({ showOnOrganizationProfile: true }),
    silent: (silent) => ({ silent }),
    smartContractId: (id) => oneToOneId(id, "smartContract"),
    smartContractsId: (id) => oneToManyId(id, "smartContracts"),
    smartContractType: (smartContractType) => smartContractType ? ({ smartContractType: { contains: smartContractType.trim(), mode: "insensitive" } }) : {},
    smartContractVersionId: (id) => oneToOneId(id, "smartContractVersion"),
    smartContractVersionsId: (id) => oneToManyId(id, "smartContractVersions"),
    standardId: (id) => oneToOneId(id, "standard"),
    standardIds: (ids) => oneToOneIds(ids, "standard"),
    standardType: (standardType) => standardType ? ({ standardType: { contains: standardType.trim(), mode: "insensitive" } }) : {},
    standardTypeLatestVersion: (type) => type ? ({
        versions: {
            some: {
                isLatest: true,
                type: { contains: type.trim(), mode: "insensitive" },
            },
        },
    }) : {},
    standardsId: (id) => oneToManyId(id, "standards"),
    standardsIds: (ids) => oneToManyIds(ids, "standards"),
    standardVersionId: (id) => oneToOneId(id, "standardVersion"),
    standardVersionsId: (id) => oneToManyId(id, "standardVersions"),
    startTimeFrame: (time) => timeFrameToPrisma("startTime", time),
    startedTimeFrame: (time) => timeFrameToPrisma("startedAt", time),
    status: (status) => ({ status }),
    tagId: (id) => oneToOneId(id, "tag"),
    tagsId: (id) => oneToManyId(id, "tags"),
    tags: (tags) => ({ tags: { some: { tag: { tag: { in: tags } } } } }),
    tagsRoot: (tags) => ({ root: { tags: { some: { tag: { tag: { in: tags } } } } } }),
    timeZone: (timeZone) => timeZone ? ({ timeZone: { contains: timeZone.trim(), mode: "insensitive" } }) : {},
    toId: (id) => oneToOneId(id, "to"),
    transferId: (id) => oneToOneId(id, "transfer"),
    transfersId: (id) => oneToManyId(id, "transfers"),
    translationLanguages: (languages) => ({ translations: { some: { language: { in: languages } } } }),
    translationLanguagesLatestVersion: (languages) => ({
        versions: {
            some: {
                isLatest: true,
                translations: { some: { language: { in: languages } } },
            },
        },
    }),
    updatedTimeFrame: (time) => timeFrameToPrisma("updated_at", time),
    userId: (id) => oneToOneId(id, "user"),
    usersId: (id) => oneToManyId(id, "users"),
    visibility: (visibility, userData, objectType) => visibilityBuilder({ objectType, userData, visibility }),
};
//# sourceMappingURL=searchMap.js.map