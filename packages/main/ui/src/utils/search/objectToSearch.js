export var SearchType;
(function (SearchType) {
    SearchType["Api"] = "Api";
    SearchType["ApiVersion"] = "ApiVersion";
    SearchType["Bookmark"] = "Bookmark";
    SearchType["BookmarkList"] = "BookmarkList";
    SearchType["Chat"] = "Chat";
    SearchType["ChatInvite"] = "ChatInvite";
    SearchType["ChatMessage"] = "ChatMessage";
    SearchType["ChatParticipant"] = "ChatParticipant";
    SearchType["Comment"] = "Comment";
    SearchType["FocusMode"] = "FocusMode";
    SearchType["Issue"] = "Issue";
    SearchType["Label"] = "Label";
    SearchType["MeetingInvite"] = "MeetingInvite";
    SearchType["Meeting"] = "Meeting";
    SearchType["MemberInvite"] = "MemberInvite";
    SearchType["Member"] = "Member";
    SearchType["Note"] = "Note";
    SearchType["NoteVersion"] = "NoteVersion";
    SearchType["Notification"] = "Notification";
    SearchType["NotificationSubscription"] = "NotificationSubscription";
    SearchType["Organization"] = "Organization";
    SearchType["Popular"] = "Popular";
    SearchType["Post"] = "Post";
    SearchType["ProjectOrOrganization"] = "ProjectOrOrganization";
    SearchType["ProjectOrRoutine"] = "ProjectOrRoutine";
    SearchType["Project"] = "Project";
    SearchType["ProjectVersion"] = "ProjectVersion";
    SearchType["PullRequest"] = "PullRequest";
    SearchType["Question"] = "Question";
    SearchType["QuestionAnswer"] = "QuestionAnswer";
    SearchType["Quiz"] = "Quiz";
    SearchType["QuizAttempt"] = "QuizAttempt";
    SearchType["QuizQuestion"] = "QuizQuestion";
    SearchType["QuizQuestionResponse"] = "QuizQuestionResponse";
    SearchType["Reaction"] = "Reaction";
    SearchType["Reminder"] = "Reminder";
    SearchType["ReportResponse"] = "ReportResponse";
    SearchType["Report"] = "Report";
    SearchType["ReputationHistory"] = "ReputationHistory";
    SearchType["ResourceList"] = "ResourceList";
    SearchType["Resource"] = "Resource";
    SearchType["Role"] = "Role";
    SearchType["Routine"] = "Routine";
    SearchType["RoutineVersion"] = "RoutineVersion";
    SearchType["RunProject"] = "RunProject";
    SearchType["RunProjectOrRunRoutine"] = "RunProjectOrRunRoutine";
    SearchType["RunRoutine"] = "RunRoutine";
    SearchType["RunRoutineInput"] = "RunRoutineInput";
    SearchType["Schedule"] = "Schedule";
    SearchType["SmartContract"] = "SmartContract";
    SearchType["SmartContractVersion"] = "SmartContractVersion";
    SearchType["Standard"] = "Standard";
    SearchType["StandardVersion"] = "StandardVersion";
    SearchType["StatsApi"] = "StatsApi";
    SearchType["StatsOrganization"] = "StatsOrganization";
    SearchType["StatsProject"] = "StatsProject";
    SearchType["StatsQuiz"] = "StatsQuiz";
    SearchType["StatsRoutine"] = "StatsRoutine";
    SearchType["StatsSite"] = "StatsSite";
    SearchType["StatsSmartContract"] = "StatsSmartContract";
    SearchType["StatsStandard"] = "StatsStandard";
    SearchType["StatsUser"] = "StatsUser";
    SearchType["Tag"] = "Tag";
    SearchType["Transfer"] = "Transfer";
    SearchType["User"] = "User";
    SearchType["View"] = "View";
})(SearchType || (SearchType = {}));
export var HistoryPageTabOption;
(function (HistoryPageTabOption) {
    HistoryPageTabOption["RunsActive"] = "RunsActive";
    HistoryPageTabOption["RunsCompleted"] = "RunsCompleted";
    HistoryPageTabOption["Viewed"] = "Viewed";
    HistoryPageTabOption["Bookmarked"] = "Bookmarked";
})(HistoryPageTabOption || (HistoryPageTabOption = {}));
export var SearchPageTabOption;
(function (SearchPageTabOption) {
    SearchPageTabOption["Apis"] = "Apis";
    SearchPageTabOption["Notes"] = "Notes";
    SearchPageTabOption["Organizations"] = "Organizations";
    SearchPageTabOption["Projects"] = "Projects";
    SearchPageTabOption["Questions"] = "Questions";
    SearchPageTabOption["Routines"] = "Routines";
    SearchPageTabOption["SmartContracts"] = "SmartContracts";
    SearchPageTabOption["Standards"] = "Standards";
    SearchPageTabOption["Users"] = "Users";
})(SearchPageTabOption || (SearchPageTabOption = {}));
export var CalendarPageTabOption;
(function (CalendarPageTabOption) {
    CalendarPageTabOption["Meetings"] = "Meetings";
    CalendarPageTabOption["Routines"] = "Routines";
    CalendarPageTabOption["Projects"] = "Projects";
    CalendarPageTabOption["FocusModes"] = "FocusModes";
})(CalendarPageTabOption || (CalendarPageTabOption = {}));
export const searchTypeToParams = {
    Api: async () => (await import("./schemas/api")).apiSearchParams(),
    ApiVersion: async () => (await import("./schemas/apiVersion")).apiVersionSearchParams(),
    Bookmark: async () => (await import("./schemas/bookmark")).bookmarkSearchParams(),
    BookmarkList: async () => (await import("./schemas/bookmarkList")).bookmarkListSearchParams(),
    Chat: async () => (await import("./schemas/chat")).chatSearchParams(),
    ChatInvite: async () => (await import("./schemas/chatInvite")).chatInviteSearchParams(),
    ChatMessage: async () => (await import("./schemas/chatMessage")).chatMessageSearchParams(),
    ChatParticipant: async () => (await import("./schemas/chatParticipant")).chatParticipantSearchParams(),
    Comment: async () => (await import("./schemas/comment")).commentSearchParams(),
    FocusMode: async () => (await import("./schemas/focusMode")).focusModeSearchParams(),
    Issue: async () => (await import("./schemas/issue")).issueSearchParams(),
    Label: async () => (await import("./schemas/label")).labelSearchParams(),
    Meeting: async () => (await import("./schemas/meeting")).meetingSearchParams(),
    MeetingInvite: async () => (await import("./schemas/meetingInvite")).meetingInviteSearchParams(),
    Member: async () => (await import("./schemas/member")).memberSearchParams(),
    MemberInvite: async () => (await import("./schemas/memberInvite")).memberInviteSearchParams(),
    Note: async () => (await import("./schemas/note")).noteSearchParams(),
    NoteVersion: async () => (await import("./schemas/noteVersion")).noteVersionSearchParams(),
    Notification: async () => (await import("./schemas/notification")).notificationSearchParams(),
    NotificationSubscription: async () => (await import("./schemas/notificationSubscription")).notificationSubscriptionSearchParams(),
    Organization: async () => (await import("./schemas/organization")).organizationSearchParams(),
    Popular: async () => (await import("./schemas/popular")).popularSearchParams(),
    Post: async () => (await import("./schemas/post")).postSearchParams(),
    Project: async () => (await import("./schemas/project")).projectSearchParams(),
    ProjectOrOrganization: async () => (await import("./schemas/projectOrOrganization")).projectOrOrganizationSearchParams(),
    ProjectOrRoutine: async () => (await import("./schemas/projectOrRoutine")).projectOrRoutineSearchParams(),
    ProjectVersion: async () => (await import("./schemas/projectVersion")).projectVersionSearchParams(),
    PullRequest: async () => (await import("./schemas/pullRequest")).pullRequestSearchParams(),
    Question: async () => (await import("./schemas/question")).questionSearchParams(),
    QuestionAnswer: async () => (await import("./schemas/questionAnswer")).questionAnswerSearchParams(),
    Quiz: async () => (await import("./schemas/quiz")).quizSearchParams(),
    QuizAttempt: async () => (await import("./schemas/quizAttempt")).quizAttemptSearchParams(),
    QuizQuestion: async () => (await import("./schemas/quizQuestion")).quizQuestionSearchParams(),
    QuizQuestionResponse: async () => (await import("./schemas/quizQuestionResponse")).quizQuestionResponseSearchParams(),
    Reaction: async () => (await import("./schemas/reaction")).reactionSearchParams(),
    Reminder: async () => (await import("./schemas/reminder")).reminderSearchParams(),
    Report: async () => (await import("./schemas/report")).reportSearchParams(),
    ReportResponse: async () => (await import("./schemas/reportResponse")).reportResponseSearchParams(),
    ReputationHistory: async () => (await import("./schemas/reputationHistory")).reputationHistorySearchParams(),
    Resource: async () => (await import("./schemas/resource")).resourceSearchParams(),
    ResourceList: async () => (await import("./schemas/resourceList")).resourceListSearchParams(),
    Role: async () => (await import("./schemas/role")).roleSearchParams(),
    Routine: async () => (await import("./schemas/routine")).routineSearchParams(),
    RoutineVersion: async () => (await import("./schemas/routineVersion")).routineVersionSearchParams(),
    RunProject: async () => (await import("./schemas/runProject")).runProjectSearchParams(),
    RunProjectOrRunRoutine: async () => (await import("./schemas/runProjectOrRunRoutine")).runProjectOrRunRoutineSearchParams(),
    RunRoutine: async () => (await import("./schemas/runRoutine")).runRoutineSearchParams(),
    RunRoutineInput: async () => (await import("./schemas/runRoutineInput")).runRoutineInputSearchParams(),
    Schedule: async () => (await import("./schemas/schedule")).scheduleSearchParams(),
    SmartContract: async () => (await import("./schemas/smartContract")).smartContractSearchParams(),
    SmartContractVersion: async () => (await import("./schemas/smartContractVersion")).smartContractVersionSearchParams(),
    Standard: async () => (await import("./schemas/standard")).standardSearchParams(),
    StandardVersion: async () => (await import("./schemas/standardVersion")).standardVersionSearchParams(),
    StatsApi: async () => (await import("./schemas/statsApi")).statsApiSearchParams(),
    StatsOrganization: async () => (await import("./schemas/statsOrganization")).statsOrganizationSearchParams(),
    StatsProject: async () => (await import("./schemas/statsProject")).statsProjectSearchParams(),
    StatsQuiz: async () => (await import("./schemas/statsQuiz")).statsQuizSearchParams(),
    StatsRoutine: async () => (await import("./schemas/statsRoutine")).statsRoutineSearchParams(),
    StatsSite: async () => (await import("./schemas/statsSite")).statsSiteSearchParams(),
    StatsSmartContract: async () => (await import("./schemas/statsSmartContract")).statsSmartContractSearchParams(),
    StatsStandard: async () => (await import("./schemas/statsStandard")).statsStandardSearchParams(),
    StatsUser: async () => (await import("./schemas/statsUser")).statsUserSearchParams(),
    Tag: async () => (await import("./schemas/tag")).tagSearchParams(),
    Transfer: async () => (await import("./schemas/transfer")).transferSearchParams(),
    User: async () => (await import("./schemas/user")).userSearchParams(),
    View: async () => (await import("./schemas/view")).viewSearchParams(),
};
//# sourceMappingURL=objectToSearch.js.map