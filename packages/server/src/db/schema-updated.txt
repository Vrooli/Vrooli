// Next version: Full routine running support.
# Changes

## Code:
- Add field for language. Available on create and update (e.g. switching from JavaScript to TypeScript is a plausible reason to need this).
- Add enum for type (i.e. DataConvert or SmartContract). Only available on create.
- NOTE: Already has field `contractType`. This should be used when enum is SmartContract to store the type of contract (e.g. ERC20, ERC721 for Ethereum)
- Add field for address, which is the way to identify the contract on the blockchain. Only available on create.
- Add field for isAddressVerified, which is a boolean that indicates if the address is correct. This is needed because 
  it's typically not possible to enter the address on a site like Cardanoscan and see the code, so we'll need to add a job 
  which checks if the address's code (typically obtained through a hash of the contract code) matches what was entered in the address field.
  This is not available for the user to set directly.
- Add field for hash and isHashVerified, which may differ from the address in some cases. Depends on the blockchain. These are not available for the user to set directly.
- Add field to indicate which blockchain the contract is on.

model code {
    + codeLanguage string
    + codeType enum (DataConvert, SmartContract)
    - contractType string?
    + contract code_version_contract?
}
+ model code_version_contract {
    + address string?
    + blockchain string
    + contractType string?
    + hash string?
    + isAddressVerified boolean
    + isHashVerified boolean
    + codeVersionId string
    + codeVersion code_version @relation(fields: [codeId], references: [id], onDelete: Cascade)
}


## Routine:
Variants are:
- Add field for type, which is an RoutineType enum
- Add field for action call data, which is used for RoutineType.Action routines to trigger a system action (e.g. create, update, delete). 
Stores a JSON object depicting the action to take. Example:
```
{
    "action": "create",
    "object": "user",
    "data": {
        "name": "inputId1", // Links to defined routine_version_input
        "email": "inputId2", // Links to defined routine_version_input
    }
}
```
All data fields must be defined in the routine_version. When you select an action, it should automatically create them for you, with the correct types.
- Add field for generate call data, which will be used to define data to call an AI and receive a response. Example:
```
{
    "model": "gpt-4o",
    "preferredFallbacks": ["gpt-3", "gpt-2"],
    // All data added sequentially to the model
    "data": [{
        input: "inputId1", // Links to defined routine_version_input
        delimiter: "\n\n", // In this case, adds two new lines after the input
    }]
}

model routine_version {
    + routineType enum
    // Combining call data fields to one, since only one will be used at a time
    - actionCallData string?
    - codeCallData string?
    + configCallData string? // Used for Action, API, Code, Generate types
}



// Next version of schema. Stored in separate file to avoid migrating before we're ready.
// Supports the following updates:
// 11. Payment history for credits (both users and API) ✅
// 12. Node conditions ✅
// 13. Routine suggestions ✅
// 14. Reporting improvements (report status and report responses) ✅
// 15. Reputation system (your reputation is stored in awards table) ✅
// 16. Smart contracts ✅
// 17. APIs and calling them from routines ✅
// 18. Notes (organized using projects) ✅
// 19. Issues. Has comments, votes, reports, labels, and a status. Can be applied to apis, teams, projects, routines, smart contracts, and standards ✅
// 22. Suggest run data public, so owners can view it (e.g. polls) ✅
// 23. Vote table's byId cascade delete, since this was preventing account deletion ✅
// 24. Referencing an object in a comment, note, or issue. Could maybe get away with using resource list ⚠️
// 25. Feeds for users and teams. Each post contains an optional title and description, with one or more
// resources. If resource is a Vrooli object, uses the object's title and description. Routine resourcess can act as a questionnaire, call to action, etc. Feeds
// without a resource can act as an AMA, discussion, random thought, etc. Feeds can be public or private (always private for users), and receive 
// comments, votes, views, reports, and reposts. Up to posts can be pinned to the top of a feed. While maybe not necessary, should be set up 
// so users and teams can have multiple feeds ✅
// 26. A question object. Can be attached to routines, projects, standards, smart contracts, apis, teams, or be standalone (standalone ones show up in site search). Can be marked as answered,
// and can be viewed, voted, bookmarked, reported, tagged, isPrivate. Also has isSpecificToObject field to specify if question should 
// come up when one searches for existing questions to attach to an object ✅
// 28. Quiz object. Stores status, questions with weights, scoreToPass. Can be personal (created by you or auto-generated to 
// test your understanding of previously-run learning routines), or attached to a post or routine. These quizzes have their own question/answer tables
// different than the "question object" in the item above - so be careful when implementing ✅
// 29. Quiz results object. Stores score, correct/incorrect answers, and time taken ✅
// 29. Awards. Stores progress instead of isComplete. For rewards with only one tier, progress is 0 or 1. For rewards with multiple tiers,
// progress is the number of times you've completed that action. The closest lower tier is the one you're currently on. ✅
// 30. Streaks ✅
// 31. Project maps ✅
// 32. Improved role permissions ✅
// 33. Multi-role routines ✅
// 34. Fundraising/funding ⚠️
// 35. Personal reminders, overall and by schedule ✅
// 36. Add invitedBy relation to users ✅
// 37. Transfer object request ✅
// 38. Update resource lists so only one per object. Also add them to user schedules. This will allow the Home page to be more dynamic ✅
// 39. Node voting/waiting. Multi-role routines should allow members of certain roles to vote if a node is passed or failed. This will allow
// for things like creating work proposals, where members can determine if the proposal is worth pursuing ✅
// 40. Notifications for specific objects ✅
// 41. Bounty system ⚠️
// 42. Share private objects with other users ⚠️