// Next version of schema. Stored in separate file to avoid migrating before we're ready.
// Supports the following updates:
// 1. Order routine inputs/outputs ✅
// 2. Routine scheduling
// 3. Labels (different than tags) for personal or organization use ✅
// 4. Improved versioning of routines and standards ✅
// 5. Pull requests for updating versioned objects
// 6. Push notifications with history, and notifications settings
// 7. Generating API keys ✅
// 8. Account credits to limit usage. Can pay for premium, which includes
// higher limits and more features.
// 9. Payment history for credits (both users and API) and premium
// 10. Node conditions
// 11. Routine suggestions
// 12. Reporting improvements (report status and report responses) ✅
// 13. Reputation system
// 14. Smart contracts ✅
// 15. APIs and calling them
// 16. Notes (organized using projects) ✅
// 17. Issues
// 18. Site statisticcs ✅
// 19. Object statistics ✅
// 20. Suggest run data public, so owners can view it (e.g. polls) ✅
// 21. Vote table's byId cascade delete, since this was preventing account deletion
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model api {
    id                String            @id @default(uuid()) @db.Uuid
    created_at        DateTime          @default(now()) @db.Timestamptz(6)
    updated_at        DateTime          @default(now()) @db.Timestamptz(6)
    callLink          String            @unique @db.VarChar(1024)
    documentationLink String            @db.VarChar(1024)
    stars             Int               @default(0)
    score             Int               @default(0)
    views             Int               @default(0)
    userId            String?           @db.Uuid
    organizationId    String?           @db.Uuid
    user              user?             @relation(fields: [userId], references: [id])
    organization      organization?     @relation(fields: [organizationId], references: [id])
    translations      api_translation[]
    resourceLists     resource_list[]
    tags              api_tags[]
    comments          comment[]
    reports           report[]
    starredBy         star[]            @relation("star_api")
    votes             vote[]            @relation("vote_api")
    viewsBy           view[]            @relation("view_api")
}

model api_translation {
    id       String  @id @default(uuid()) @db.Uuid
    summary  String? @db.VarChar(1024)
    details  String? @db.VarChar(8096)
    language String  @db.VarChar(3)
    apiId    String  @db.Uuid
    api      api     @relation(fields: [apiId], references: [id], onDelete: Cascade)
}

model api_tags {
    id       String @id @default(uuid()) @db.Uuid
    taggedId String @db.Uuid
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   api    @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "api_tags_taggedid_tagTag_unique")
}

model api_key {
    id               String   @id @default(uuid()) @db.Uuid
    created_at       DateTime @default(now()) @db.Timestamptz(6)
    updated_at       DateTime @default(now()) @db.Timestamptz(6)
    key              String   @unique @db.VarChar(255)
    countBeforeLimit Int      @default(20000)
    stopAtLimit      Boolean  @default(true)
    absoluteMax      Int?     @default(1000000)
    userId           String   @db.Uuid
    user             user     @relation(fields: [userId], references: [id])
}

model comment {
    id              String                @id @default(uuid()) @db.Uuid
    created_at      DateTime              @default(now()) @db.Timestamptz(6)
    updated_at      DateTime              @default(now()) @db.Timestamptz(6)
    userId          String?               @db.Uuid
    organizationId  String?               @db.Uuid
    apiId           String?               @db.Uuid
    parentId        String?               @db.Uuid
    projectId       String?               @db.Uuid
    routineId       String?               @db.Uuid
    smartContractId String?               @db.Uuid
    standardId      String?               @db.Uuid
    stars           Int                   @default(0)
    score           Int                   @default(0)
    api             api?                  @relation(fields: [apiId], references: [id], onDelete: Cascade)
    organization    organization?         @relation(fields: [organizationId], references: [id], onDelete: SetNull)
    parent          comment?              @relation("comment_parent", fields: [parentId], references: [id], onDelete: Cascade)
    project         project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine         routine?              @relation(fields: [routineId], references: [id], onDelete: Cascade)
    smartContract   smart_contract?       @relation(fields: [smartContractId], references: [id], onDelete: Cascade)
    standard        standard?             @relation(fields: [standardId], references: [id], onDelete: Cascade)
    user            user?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
    translations    comment_translation[]
    reports         report[]
    starredBy       star[]                @relation("star_comment")
    votes           vote[]                @relation("vote_comment")
    parents         comment[]             @relation("comment_parent")
}

model comment_translation {
    id        String  @id @default(uuid()) @db.Uuid
    text      String  @db.VarChar(2048)
    language  String  @db.VarChar(3)
    commentId String  @db.Uuid
    comment   comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([commentId, language])
}

model data_site {
    id                                          String     @id @default(uuid()) @db.Uuid
    created_at                                  DateTime   @default(now()) @db.Timestamptz(6)
    period_start                                DateTime   @db.Timestamptz(6)
    period_end                                  DateTime   @db.Timestamptz(6)
    periodType                                  PeriodType
    activeUsers                                 Int
    apiCallsPeriod                              Int
    apis                                        Int
    organizations                               Int
    projects                                    Int
    projectsCompleted                           Int
    projectsCompletionTimeAverageInPeriod       Float
    routines                                    Int
    routinesCompleted                           Int
    routinesCompletionTimeAverageInPeriod       Float
    routinesSimplicityAverage                   Int
    routinesComplexityAverage                   Int
    runsStarted                                 Int
    runsCompleted                               Int
    runsCompletionTimeAverageInPeriod           Float
    smartContractsCreated                       Int
    smartContractsCompleted                     Int
    smartContractsCompletionTimeAverageInPeriod Float
    smartContractCalls                          Int
    standardsCreated                            Int
    standardsCompleted                          Int
    standardsCompletionTimeAverageInPeriod      Float
    verifiedEmails                              Int
    verifiedWallets                             Int
}

model data_api {
    id           String     @id @default(uuid()) @db.Uuid
    apiId        String     @db.Uuid
    period_start DateTime   @db.Timestamptz(6)
    period_end   DateTime   @db.Timestamptz(6)
    periodType   PeriodType
    calls        Int
}

model data_organization {
    id             String     @id @default(uuid()) @db.Uuid
    organizationId String     @db.Uuid
    period_start   DateTime   @db.Timestamptz(6)
    period_end     DateTime   @db.Timestamptz(6)
    periodType     PeriodType
    apis           Int
    members        Int
    projects       Int
    routines       Int
    smartContracts Int
    standards      Int
}

model data_project {
    id             String     @id @default(uuid()) @db.Uuid
    projectId      String     @db.Uuid
    period_start   DateTime   @db.Timestamptz(6)
    period_end     DateTime   @db.Timestamptz(6)
    periodType     PeriodType
    routines       Int
    smartContracts Int
    standards      Int
    subProjects    Int
}

model data_routine {
    id                               String     @id @default(uuid()) @db.Uuid
    routineId                        String     @db.Uuid
    period_start                     DateTime   @db.Timestamptz(6)
    period_end                       DateTime   @db.Timestamptz(6)
    periodType                       PeriodType
    runsStarted                      Int
    runsCompleted                    Int
    runCompletionTimeAverageInPeriod Float
}

model data_smart_contract {
    id              String     @id @default(uuid()) @db.Uuid
    smartContractId String     @db.Uuid
    period_start    DateTime   @db.Timestamptz(6)
    period_end      DateTime   @db.Timestamptz(6)
    periodType      PeriodType
    calls           Int
}

model data_standard {
    id                           String     @id @default(uuid()) @db.Uuid
    standardId                   String     @db.Uuid
    period_start                 DateTime   @db.Timestamptz(6)
    period_end                   DateTime   @db.Timestamptz(6)
    periodType                   PeriodType
    linksToInputs                Int
    linksToOutputs               Int
    timesUsedInCompletedRoutines Int
}

model data_user {
    id                                          String     @id @default(uuid()) @db.Uuid
    userId                                      String     @db.Uuid
    period_start                                DateTime   @db.Timestamptz(6)
    period_end                                  DateTime   @db.Timestamptz(6)
    periodType                                  PeriodType
    apis                                        Int
    organizations                               Int
    projects                                    Int
    projectsCompleted                           Int
    projectsCompletionTimeAverageInPeriod       Float
    routines                                    Int
    routinesCompleted                           Int
    routinesCompletionTimeAverageInPeriod       Float
    runsStarted                                 Int
    runsCompleted                               Int
    runsCompletionTimeAverageInPeriod           Float
    smartContractsCreated                       Int
    smartContractsCompleted                     Int
    smartContractsCompletionTimeAverageInPeriod Float
    standardsCreated                            Int
    standardsCompleted                          Int
    standardsCompletionTimeAverageInPeriod      Float
}

model email {
    id                                 String    @id @default(uuid()) @db.Uuid
    emailAddress                       String    @unique @db.Citext
    receivesAccountUpdates             Boolean   @default(true)
    receivesBusinessUpdates            Boolean   @default(true)
    verified                           Boolean   @default(false)
    lastVerifiedTime                   DateTime? @db.Timestamptz(6)
    verificationCode                   String?   @unique @db.VarChar(256)
    lastVerificationCodeRequestAttempt DateTime? @db.Timestamptz(6)
    userId                             String?   @db.Uuid
    user                               user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model handle {
    id       String  @id @default(uuid()) @db.Uuid
    handle   String? @unique @db.VarChar(16)
    walletId String? @db.Uuid
    wallet   wallet? @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model label {
    id                      String                  @id @default(uuid()) @db.Uuid
    created_at              DateTime                @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                @default(now()) @db.Timestamptz(6)
    label                   String                  @unique @db.VarChar(128)
    color                   String?                 @db.VarChar(7)
    createdByUserId         String?                 @db.Uuid
    createdByOrganizationId String?                 @db.Uuid
    projects                project_labels[]
    routines                routine_labels[]
    smartContracts          smart_contract_labels[]
    standards               standard_labels[]
    createdByUser           user?                   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByOrganization   organization?           @relation(fields: [createdByOrganizationId], references: [id], onDelete: Cascade)
    translations            label_translation[]

    @@unique([label, createdByUserId, createdByOrganizationId])
}

model label_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    labelId     String  @db.Uuid
    language    String  @db.VarChar(3)
    label       label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelId, language])
}

model node {
    id               String             @id @default(uuid()) @db.Uuid
    created_at       DateTime           @default(now()) @db.Timestamptz(6)
    updated_at       DateTime           @default(now()) @db.Timestamptz(6)
    columnIndex      Int?
    rowIndex         Int?
    type             NodeType
    routineVersionId String             @db.Uuid
    routineVersion   routine_version    @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    nodeEnd          node_end?
    previous         node_link[]        @relation("node_previous")
    next             node_link[]        @relation("node_next")
    loop             node_loop?
    nodeRoutineList  node_routine_list?
    translations     node_translation[]
    runSteps         run_step[]         @relation("run_step_node")
}

model node_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    title       String  @default("Name Me") @db.VarChar(128)
    language    String  @db.VarChar(3)
    nodeId      String  @db.Uuid
    node        node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)

    @@unique([nodeId, language])
}

model node_end {
    id            String  @id @default(uuid()) @db.Uuid
    wasSuccessful Boolean @default(true)
    nodeId        String  @unique @db.Uuid
    node          node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model node_link {
    id               String           @id @default(uuid()) @db.Uuid
    fromId           String           @db.Uuid
    routineVersionId String           @db.Uuid
    toId             String           @db.Uuid
    operation        String?          @db.VarChar(512)
    from             node             @relation("node_previous", fields: [fromId], references: [id], onDelete: Cascade)
    routineVersion   routine_version  @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    to               node             @relation("node_next", fields: [toId], references: [id], onDelete: Cascade)
    whens            node_link_when[]
}

model node_link_when {
    id           String                       @id @default(uuid()) @db.Uuid
    linkId       String                       @db.Uuid
    condition    String                       @db.VarChar(8192)
    link         node_link                    @relation(fields: [linkId], references: [id], onDelete: Cascade)
    translations node_link_when_translation[]
}

model node_link_when_translation {
    id          String         @id @default(uuid()) @db.Uuid
    description String?        @db.VarChar(2048)
    title       String         @db.VarChar(128)
    language    String         @db.VarChar(3)
    whenId      String         @db.Uuid
    when        node_link_when @relation(fields: [whenId], references: [id], onDelete: Cascade)

    @@unique([whenId, language])
}

model node_loop {
    id        String            @id @default(uuid()) @db.Uuid
    loops     Int?              @default(1)
    maxLoops  Int?              @default(1)
    operation String?           @db.VarChar(512)
    nodeId    String            @unique @db.Uuid
    node      node              @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    whiles    node_loop_while[]
}

model node_loop_while {
    id           String                        @id @default(uuid()) @db.Uuid
    loopId       String                        @db.Uuid
    condition    String                        @db.VarChar(8192)
    loop         node_loop                     @relation(fields: [loopId], references: [id], onDelete: Cascade)
    translations node_loop_while_translation[]
}

model node_loop_while_translation {
    id          String          @id @default(uuid()) @db.Uuid
    description String          @db.VarChar(2048)
    title       String          @db.VarChar(128)
    language    String          @db.VarChar(3)
    whileId     String          @db.Uuid
    while       node_loop_while @relation(fields: [whileId], references: [id], onDelete: Cascade)
}

model node_routine_list {
    id         String                   @id @default(uuid()) @db.Uuid
    isOrdered  Boolean                  @default(false)
    isOptional Boolean                  @default(false)
    nodeId     String                   @unique @db.Uuid
    node       node                     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    routines   node_routine_list_item[]
}

model node_routine_list_item {
    id               String                               @id @default(uuid()) @db.Uuid
    index            Int
    isOptional       Boolean                              @default(false)
    listId           String                               @db.Uuid
    routineVersionId String                               @db.Uuid
    list             node_routine_list                    @relation(fields: [listId], references: [id], onDelete: Cascade)
    routineVersion   routine_version                      @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    translations     node_routine_list_item_translation[]

    @@unique([listId, routineVersionId], name: "node_routine_list_item_listid_routineVersionid_unique")
}

model node_routine_list_item_translation {
    id          String                 @id @default(uuid()) @db.Uuid
    description String?                @db.VarChar(2048)
    title       String?                @db.VarChar(128)
    language    String                 @db.VarChar(3)
    itemId      String                 @db.Uuid
    item        node_routine_list_item @relation(fields: [itemId], references: [id], onDelete: Cascade)

    @@unique([itemId, language])
}

model note {
    id                      String             @id @default(uuid()) @db.Uuid
    created_at              DateTime           @default(now()) @db.Timestamptz(6)
    updated_at              DateTime           @default(now()) @db.Timestamptz(6)
    isPrivate               Boolean            @default(false)
    createdByUserId         String?            @db.Uuid
    createdByOrganizationId String?            @db.Uuid
    projectId               String?            @db.Uuid
    createdByUser           user?              @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByOrganization   organization?      @relation(fields: [createdByOrganizationId], references: [id], onDelete: Cascade)
    project                 project?           @relation(fields: [projectId], references: [id], onDelete: SetNull)
    translations            note_translation[]
}

model note_translation {
    id          String  @id @default(uuid()) @db.Uuid
    text        String  @db.VarChar(65536)
    description String? @db.VarChar(2048)
    language    String  @db.VarChar(3)
    noteId      String  @db.Uuid
    note        note    @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model organization {
    id                    String                     @id @default(uuid()) @db.Uuid
    created_at            DateTime                   @default(now()) @db.Timestamptz(6)
    updated_at            DateTime                   @default(now()) @db.Timestamptz(6)
    handle                String?                    @unique @db.VarChar(16)
    isOpenToNewMembers    Boolean                    @default(false)
    isPrivate             Boolean                    @default(false)
    stars                 Int                        @default(0)
    views                 Int                        @default(0)
    labels                label[]
    notes                 note[]
    apis                  api[]
    comments              comment[]
    smartContractsCreated smart_contract[]           @relation("smart_contract_organization_creator")
    smartContracts        smart_contract[]           @relation("smart_contract_organization_owner")
    tags                  organization_tags[]
    translations          organization_translation[]
    members               organization_users[]
    projectsCreated       project[]                  @relation("project_organization_creator")
    projects              project[]                  @relation("project_organization_owner")
    reports               report[]
    resourceLists         resource_list[]
    routinesCreated       routine[]                  @relation("routine_organization_creator")
    routines              routine[]                  @relation("routine_organization_owner")
    standards             standard[]
    starredBy             star[]                     @relation("star_organization")
    viewedBy              view[]                     @relation("view_organization")
    wallets               wallet[]
    roles                 role[]
}

model organization_translation {
    id             String       @id @default(uuid()) @db.Uuid
    bio            String?      @db.VarChar(2048)
    name           String       @db.VarChar(128)
    language       String       @db.VarChar(3)
    organizationId String       @db.Uuid
    organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@unique([organizationId, language])
}

model organization_tags {
    id       String       @id @default(uuid()) @db.Uuid
    taggedId String       @db.Uuid
    tagTag   String       @db.VarChar(128)
    tag      tag          @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   organization @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "organization_tags_taggedid_tagTag_unique")
}

model organization_users {
    id             String       @id @default(uuid()) @db.Uuid
    organizationId String       @db.Uuid
    userId         String       @db.Uuid
    organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([organizationId, userId], name: "organization_users_organizationid_userid_unique")
}

model project {
    id                      String                @id @default(uuid()) @db.Uuid
    created_at              DateTime              @default(now()) @db.Timestamptz(6)
    updated_at              DateTime              @default(now()) @db.Timestamptz(6)
    isComplete              Boolean               @default(false)
    isPrivate               Boolean               @default(false)
    completedAt             DateTime?             @db.Timestamptz(6)
    score                   Int                   @default(0)
    stars                   Int                   @default(0)
    views                   Int                   @default(0)
    createdByUserId         String?               @db.Uuid
    createdByOrganizationId String?               @db.Uuid
    handle                  String?               @unique @db.VarChar(16)
    userId                  String?               @db.Uuid
    organizationId          String?               @db.Uuid
    parentId                String?               @db.Uuid
    createdByOrganization   organization?         @relation("project_organization_creator", fields: [createdByOrganizationId], references: [id], onDelete: SetNull)
    createdByUser           user?                 @relation("project_user_creator", fields: [createdByUserId], references: [id], onDelete: SetNull)
    organization            organization?         @relation("project_organization_owner", fields: [organizationId], references: [id], onDelete: SetNull)
    parent                  project?              @relation("project_fork", fields: [parentId], references: [id])
    user                    user?                 @relation("project_user_owner", fields: [userId], references: [id], onDelete: SetNull)
    comments                comment[]
    forks                   project[]             @relation("project_fork")
    labels                  project_labels[]
    notes                   note[]
    smartContracts          smart_contract[]
    tags                    project_tags[]
    translations            project_translation[]
    reports                 report[]
    resourceLists           resource_list[]
    routines                routine[]
    starredBy               star[]                @relation("star_project")
    viewedBy                view[]                @relation("view_project")
    votes                   vote[]                @relation("vote_project")
    wallets                 wallet[]
}

model project_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    name        String  @db.VarChar(128)
    language    String  @db.VarChar(3)
    projectId   String  @db.Uuid
    project     project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, language])
}

model project_tags {
    id       String  @id @default(uuid()) @db.Uuid
    taggedId String  @db.Uuid
    tagTag   String  @db.VarChar(128)
    tag      tag     @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   project @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "project_tags_taggedid_tagTag_unique")
}

model project_labels {
    id         String  @id @default(uuid()) @db.Uuid
    labelledId String  @db.Uuid
    labelId    String  @db.Uuid
    labelled   project @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "project_labels_labelledid_labelid_unique")
}

model report {
    id              String            @id @default(uuid()) @db.Uuid
    reason          String            @db.VarChar(128)
    details         String?           @db.VarChar(1024)
    language        String            @db.VarChar(3)
    created_at      DateTime          @default(now()) @db.Timestamptz(6)
    status          ReportStatus
    fromId          String            @db.Uuid
    apiId           String?           @db.Uuid
    commentId       String?           @db.Uuid
    organizationId  String?           @db.Uuid
    projectId       String?           @db.Uuid
    routineId       String?           @db.Uuid
    smartContractId String?           @db.Uuid
    standardId      String?           @db.Uuid
    tagId           String?           @db.Uuid
    userId          String?           @db.Uuid
    api             api?              @relation(fields: [apiId], references: [id], onDelete: Cascade)
    comment         comment?          @relation(fields: [commentId], references: [id], onDelete: Cascade)
    from            user              @relation("report_from", fields: [fromId], references: [id], onDelete: SetNull)
    organization    organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    project         project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine         routine?          @relation(fields: [routineId], references: [id], onDelete: Cascade)
    smartContract   smart_contract?   @relation(fields: [smartContractId], references: [id], onDelete: Cascade)
    standard        standard?         @relation(fields: [standardId], references: [id], onDelete: Cascade)
    tag             tag?              @relation(fields: [tagId], references: [id], onDelete: Cascade)
    user            user?             @relation(fields: [userId], references: [id], onDelete: Cascade)
    responses       report_response[]
}

model report_response {
    id              String                @id @default(uuid()) @db.Uuid
    reportId        String                @db.Uuid
    userId          String                @db.Uuid
    actionSuggested ReportSuggestedAction
    details         String?               @db.VarChar(1024)
    language        String?               @db.VarChar(3)
    report          report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
    user            user                  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([reportId, userId], name: "report_response_reportid_userid_unique")
}

model resource {
    id           String                 @id @default(uuid()) @db.Uuid
    created_at   DateTime               @default(now()) @db.Timestamptz(6)
    updated_at   DateTime               @default(now()) @db.Timestamptz(6)
    index        Int?                   @default(0)
    link         String                 @db.VarChar(1024)
    usedFor      ResourceUsedFor        @default(Context)
    listId       String                 @db.Uuid
    list         resource_list          @relation(fields: [listId], references: [id], onDelete: Cascade)
    translations resource_translation[]
}

model resource_translation {
    id          String   @id @default(uuid()) @db.Uuid
    description String?  @db.VarChar(2048)
    title       String?  @db.VarChar(128)
    language    String   @db.VarChar(3)
    resourceId  String   @db.Uuid
    resource    resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

    @@unique([resourceId, language])
}

model resource_list {
    id                     String                      @id @default(uuid()) @db.Uuid
    created_at             DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at             DateTime                    @default(now()) @db.Timestamptz(6)
    index                  Int?                        @default(0)
    usedFor                ResourceListUsedFor         @default(Display)
    apiId                  String?                     @db.Uuid
    organizationId         String?                     @db.Uuid
    projectId              String?                     @db.Uuid
    routineVersionId       String?                     @db.Uuid
    smartContractVersionId String?                     @db.Uuid
    standardVersionId      String?                     @db.Uuid
    userId                 String?                     @db.Uuid
    api                    api?                        @relation(fields: [apiId], references: [id], onDelete: Cascade)
    organization           organization?               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    project                project?                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routineVersion         routine_version?            @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    smartContractVersion   smart_contract_version?     @relation(fields: [smartContractVersionId], references: [id], onDelete: Cascade)
    standardVersion        standard_version?           @relation(fields: [standardVersionId], references: [id], onDelete: Cascade)
    user                   user?                       @relation(fields: [userId], references: [id], onDelete: Cascade)
    resources              resource[]
    translations           resource_list_translation[]
}

model resource_list_translation {
    id          String        @id @default(uuid()) @db.Uuid
    description String?       @db.VarChar(512)
    title       String?       @db.VarChar(128)
    language    String        @db.VarChar(3)
    listId      String        @db.Uuid
    list        resource_list @relation(fields: [listId], references: [id], onDelete: Cascade)

    @@unique([listId, language])
}

model role {
    id             String             @id @default(uuid()) @db.Uuid
    created_at     DateTime           @default(now()) @db.Timestamptz(6)
    updated_at     DateTime           @default(now()) @db.Timestamptz(6)
    title          String             @db.VarChar(128)
    organizationId String             @db.Uuid
    organization   organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    assignees      user_roles[]
    translations   role_translation[]

    @@unique([organizationId, title], name: "role_organizationId_title_unique")
}

model role_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    title       String  @db.VarChar(128)
    language    String  @db.VarChar(3)
    roleId      String  @db.Uuid
    role        role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([roleId, language])
}

model routine {
    id                      String            @id @default(uuid()) @db.Uuid
    created_at              DateTime          @default(now()) @db.Timestamptz(6)
    updated_at              DateTime          @default(now()) @db.Timestamptz(6)
    hasCompleteVersion      Boolean           @default(false)
    isDeleted               Boolean           @default(false)
    isInternal              Boolean           @default(false)
    isPrivate               Boolean           @default(false)
    score                   Int               @default(0)
    stars                   Int               @default(0)
    views                   Int               @default(0)
    createdByUserId         String?           @db.Uuid
    createdByOrganizationId String?           @db.Uuid
    organizationId          String?           @db.Uuid
    parentId                String?           @db.Uuid
    projectId               String?           @db.Uuid
    userId                  String?           @db.Uuid
    createdByOrganization   organization?     @relation("routine_organization_creator", fields: [createdByOrganizationId], references: [id], onDelete: SetNull)
    createdByUser           user?             @relation("routine_user_creator", fields: [createdByUserId], references: [id], onDelete: SetNull)
    organization            organization?     @relation("routine_organization_owner", fields: [organizationId], references: [id], onDelete: SetNull)
    parent                  routine_version?  @relation("routine_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    project                 project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
    user                    user?             @relation("routine_user_owner", fields: [userId], references: [id], onDelete: SetNull)
    comments                comment[]
    reports                 report[]
    labels                  routine_labels[]
    tags                    routine_tags[]
    starredBy               star[]            @relation("star_routine")
    versions                routine_version[]
    viewedBy                view[]            @relation("view_routine")
    votes                   vote[]            @relation("vote_routine")
}

model routine_version {
    id             String                        @id @default(uuid()) @db.Uuid
    created_at     DateTime                      @default(now()) @db.Timestamptz(6)
    updated_at     DateTime                      @default(now()) @db.Timestamptz(6)
    complexity     Int                           @default(1)
    isAutomatable  Boolean                       @default(false)
    isComplete     Boolean                       @default(true)
    isDeleted      Boolean                       @default(false)
    isPrivate      Boolean                       @default(false)
    routineId      String                        @db.Uuid
    simplicity     Int                           @default(1)
    timesStarted   Int                           @default(0)
    timesCompleted Int                           @default(0)
    version        String                        @default("1.0.0") @db.VarChar(16)
    nodes          node[]
    nodeLinks      node_link[]
    nodeLists      node_routine_list_item[]
    resourceLists  resource_list[]
    routine        routine                       @relation(fields: [routineId], references: [id], onDelete: Cascade)
    forks          routine[]                     @relation("routine_version_fork")
    inputs         routine_version_input[]
    outputs        routine_version_output[]
    translations   routine_version_translation[]
    runs           run[]                         @relation("run_routine_version")
    runSteps       run_step[]                    @relation("run_step_subroutine")

    @@unique([routineId, version], name: "routine_version_routineId_version_unique")
}

model routine_version_translation {
    id               String          @id @default(uuid()) @db.Uuid
    description      String?         @db.VarChar(2048)
    instructions     String          @db.VarChar(8192)
    title            String          @db.VarChar(128)
    language         String          @db.VarChar(3)
    routineVersionId String          @db.Uuid
    routineVersion   routine_version @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)

    @@unique([routineVersionId, language])
}

model routine_version_input {
    id                String                              @id @default(uuid()) @db.Uuid
    index             Int?                                @default(0)
    isRequired        Boolean                             @default(true)
    name              String?                             @db.VarChar(128)
    routineVersionId  String                              @db.Uuid
    standardVersionId String?                             @db.Uuid
    routineVersion    routine_version                     @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    standardVersion   standard_version?                   @relation(fields: [standardVersionId], references: [id], onDelete: SetNull)
    translations      routine_version_input_translation[]
    runInputs         run_input[]
}

model routine_version_input_translation {
    id                    String                @id @default(uuid()) @db.Uuid
    description           String?               @db.VarChar(2048)
    helpText              String?               @db.VarChar(2048)
    routineVersionInputId String                @db.Uuid
    language              String                @db.VarChar(3)
    routineVersionInput   routine_version_input @relation(fields: [routineVersionInputId], references: [id], onDelete: Cascade)

    @@unique([routineVersionInputId, language])
}

model routine_version_output {
    id                String                                @id @default(uuid()) @db.Uuid
    index             Int?                                  @default(0)
    name              String?                               @db.VarChar(128)
    routineVersionId  String                                @db.Uuid
    standardVersionId String?                               @db.Uuid
    routineVersion    routine_version                       @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    standardVersion   standard_version?                     @relation(fields: [standardVersionId], references: [id], onDelete: SetNull)
    translations      routine_verstion_output_translation[]
}

model routine_verstion_output_translation {
    id                   String                 @id @default(uuid()) @db.Uuid
    description          String?                @db.VarChar(2048)
    helpText             String?                @db.VarChar(2048)
    routineOutputId      String                 @db.Uuid
    language             String                 @db.VarChar(3)
    routineVersionOutput routine_version_output @relation(fields: [routineOutputId], references: [id], onDelete: Cascade)

    @@unique([routineOutputId, language])
}

model routine_tags {
    id       String  @id @default(uuid()) @db.Uuid
    taggedId String  @db.Uuid
    tagTag   String  @db.VarChar(128)
    tag      tag     @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   routine @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "routine_tags_taggedid_tagTag_unique")
}

model routine_labels {
    id         String  @id @default(uuid()) @db.Uuid
    labelledId String  @db.Uuid
    labelId    String  @db.Uuid
    labelled   routine @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "routine_labels_labelledid_labelid_unique")
}

model run {
    id                  String           @id @default(uuid()) @db.Uuid
    created_at          DateTime         @default(now()) @db.Timestamptz(6)
    updated_at          DateTime         @default(now()) @db.Timestamptz(6)
    completedComplexity Int              @default(0)
    contextSwitches     Int              @default(0)
    isPrivate           Boolean          @default(false)
    suggestPublicRun    Boolean          @default(false)
    timeStarted         DateTime?        @db.Timestamptz(6)
    timeElapsed         Int?
    timeCompleted       DateTime?        @db.Timestamptz(6)
    title               String           @db.VarChar(128)
    status              RunStatus        @default(Scheduled)
    version             String           @db.VarChar(16)
    routineVersionId    String?          @db.Uuid
    userId              String           @db.Uuid
    routineVersion      routine_version? @relation("run_routine_version", fields: [routineVersionId], references: [id])
    user                user             @relation("run_user", fields: [userId], references: [id])
    steps               run_step[]       @relation("run_step_run")
    inputs              run_input[]      @relation("run_input_run")
}

model run_input {
    id      String                @id @default(uuid()) @db.Uuid
    data    String                @db.VarChar(8192)
    inputId String                @db.Uuid
    runId   String                @db.Uuid
    input   routine_version_input @relation(fields: [inputId], references: [id], onDelete: Cascade)
    run     run                   @relation("run_input_run", fields: [runId], references: [id], onDelete: Cascade)
}

model run_step {
    id                  String           @id @default(uuid()) @db.Uuid
    order               Int
    contextSwitches     Int              @default(0)
    runId               String           @db.Uuid
    nodeId              String?          @db.Uuid
    subroutineVersionId String?          @db.Uuid
    timeStarted         DateTime?        @db.Timestamptz(6)
    timeElapsed         Int?
    timeCompleted       DateTime?        @db.Timestamptz(6)
    step                Int[]
    status              RunStepStatus    @default(InProgress)
    title               String           @db.VarChar(128)
    node                node?            @relation("run_step_node", fields: [nodeId], references: [id], onDelete: SetNull)
    run                 run              @relation("run_step_run", fields: [runId], references: [id], onDelete: Cascade)
    subroutine          routine_version? @relation("run_step_subroutine", fields: [subroutineVersionId], references: [id])
}

model smart_contract {
    id                      String                   @id @default(uuid()) @db.Uuid
    created_at              DateTime                 @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                 @default(now()) @db.Timestamptz(6)
    hasCompleteVersion      Boolean                  @default(false)
    isDeleted               Boolean                  @default(false)
    isPrivate               Boolean                  @default(false)
    score                   Int                      @default(0)
    stars                   Int                      @default(0)
    views                   Int                      @default(0)
    createdByUserId         String?                  @db.Uuid
    createdByOrganizationId String?                  @db.Uuid
    organizationId          String?                  @db.Uuid
    parentId                String?                  @db.Uuid
    projectId               String?                  @db.Uuid
    userId                  String?                  @db.Uuid
    createdByOrganization   organization?            @relation("smart_contract_organization_creator", fields: [createdByOrganizationId], references: [id], onDelete: SetNull)
    createdByUser           user?                    @relation("smart_contract_user_creator", fields: [createdByUserId], references: [id], onDelete: SetNull)
    organization            organization?            @relation("smart_contract_organization_owner", fields: [organizationId], references: [id], onDelete: SetNull)
    parent                  smart_contract_version?  @relation("smart_contract_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    project                 project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
    user                    user?                    @relation("smart_contract_user_owner", fields: [userId], references: [id], onDelete: SetNull)
    comments                comment[]
    reports                 report[]
    labels                  smart_contract_labels[]
    tags                    smart_contract_tags[]
    starredBy               star[]                   @relation("star_smart_contract")
    versions                smart_contract_version[]
    viewedBy                view[]                   @relation("view_smart_contract")
    votes                   vote[]                   @relation("vote_smart_contract")
}

model smart_contract_version {
    id              String                               @id @default(uuid()) @db.Uuid
    created_at      DateTime                             @default(now()) @db.Timestamptz(6)
    updated_at      DateTime                             @default(now()) @db.Timestamptz(6)
    default         String?                              @db.VarChar(1024)
    type            String
    content         String                               @db.VarChar(8192)
    smartContractId String                               @db.Uuid
    version         String                               @default("1.0.0") @db.VarChar(16)
    isComplete      Boolean                              @default(false)
    isDeleted       Boolean                              @default(false)
    isPrivate       Boolean                              @default(false)
    forks           smart_contract[]                     @relation("smart_contract_version_fork")
    smartContract   smart_contract                       @relation(fields: [smartContractId], references: [id], onDelete: Cascade)
    resourceLists   resource_list[]
    translations    smart_contract_version_translation[]

    @@unique([smartContractId, version], name: "smart_contract_version_smartContractId_version_unique")
}

model smart_contract_version_translation {
    id                     String                 @id @default(uuid()) @db.Uuid
    description            String?                @db.VarChar(2048)
    jsonVariable           String?                @db.VarChar(8192)
    smartContractVersionId String                 @db.Uuid
    language               String                 @db.VarChar(3)
    smartContractVersion   smart_contract_version @relation(fields: [smartContractVersionId], references: [id], onDelete: Cascade)

    @@unique([smartContractVersionId, language])
}

model smart_contract_tags {
    id       String         @id @default(uuid()) @db.Uuid
    taggedId String         @db.Uuid
    tagTag   String         @db.VarChar(128)
    tag      tag            @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   smart_contract @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "smart_contract_tags_taggedid_tagTag_unique")
}

model smart_contract_labels {
    id         String         @id @default(uuid()) @db.Uuid
    labelledId String         @db.Uuid
    labelId    String         @db.Uuid
    labelled   smart_contract @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label          @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "smart_contract_labels_labelledid_labelid_unique")
}

model standard {
    id                      String             @id @default(uuid()) @db.Uuid
    created_at              DateTime           @default(now()) @db.Timestamptz(6)
    updated_at              DateTime           @default(now()) @db.Timestamptz(6)
    default                 String?            @db.VarChar(1024)
    hasCompleteVersion      Boolean            @default(false)
    name                    String             @db.VarChar(128)
    score                   Int                @default(0)
    stars                   Int                @default(0)
    isDeleted               Boolean            @default(false)
    isInternal              Boolean            @default(false)
    isPrivate               Boolean            @default(false)
    parentId                String?            @db.Uuid
    views                   Int                @default(0)
    createdByUserId         String?            @db.Uuid
    createdByOrganizationId String?            @db.Uuid
    createdByOrganization   organization?      @relation(fields: [createdByOrganizationId], references: [id], onDelete: SetNull)
    createdByUser           user?              @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    comments                comment[]
    labels                  standard_labels[]
    parent                  standard_version?  @relation("standard_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    reports                 report[]
    tags                    standard_tags[]
    starredBy               star[]             @relation("star_standard")
    versions                standard_version[]
    viewedBy                view[]             @relation("view_standard")
    votes                   vote[]             @relation("vote_standard")

    @@unique([createdByUserId, createdByOrganizationId, name], name: "standard_createdByUserId_createdByOrganizationId_name_unique")
}

model standard_version {
    id             String                         @id @default(uuid()) @db.Uuid
    created_at     DateTime                       @default(now()) @db.Timestamptz(6)
    updated_at     DateTime                       @default(now()) @db.Timestamptz(6)
    default        String?                        @db.VarChar(1024)
    type           String
    props          String                         @db.VarChar(8192)
    standardId     String                         @db.Uuid
    yup            String?                        @db.VarChar(8192)
    version        String                         @default("1.0.0") @db.VarChar(16)
    isCompleted    Boolean                        @default(false)
    isDeleted      Boolean                        @default(false)
    isPrivate      Boolean                        @default(false)
    isFile         Boolean                        @default(false)
    forks          standard[]                     @relation("standard_version_fork")
    standard       standard                       @relation(fields: [standardId], references: [id], onDelete: Cascade)
    resourceLists  resource_list[]
    routineInputs  routine_version_input[]
    routineOutputs routine_version_output[]
    translations   standard_version_translation[]

    @@unique([standardId, version], name: "standard_version_standardId_version_unique")
}

model standard_version_translation {
    id                String           @id @default(uuid()) @db.Uuid
    description       String?          @db.VarChar(2048)
    jsonVariable      String?          @db.VarChar(8192)
    standardVersionId String           @db.Uuid
    language          String           @db.VarChar(3)
    standardVersion   standard_version @relation(fields: [standardVersionId], references: [id], onDelete: Cascade)

    @@unique([standardVersionId, language])
}

model standard_tags {
    id       String   @id @default(uuid()) @db.Uuid
    taggedId String   @db.Uuid
    tagTag   String   @db.VarChar(128)
    tag      tag      @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   standard @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "standard_tags_taggedid_tagTag_unique")
}

model standard_labels {
    id         String   @id @default(uuid()) @db.Uuid
    labelledId String   @db.Uuid
    labelId    String   @db.Uuid
    labelled   standard @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "standard_labels_labelledid_labelid_unique")
}

model star {
    id              String          @id @default(uuid()) @db.Uuid
    byId            String          @db.Uuid
    apiId           String?         @db.Uuid
    commentId       String?         @db.Uuid
    organizationId  String?         @db.Uuid
    projectId       String?         @db.Uuid
    routineId       String?         @db.Uuid
    smartContractId String?         @db.Uuid
    standardId      String?         @db.Uuid
    tagId           String?         @db.Uuid
    userId          String?         @db.Uuid
    by              user            @relation("star_by", fields: [byId], references: [id], onDelete: Cascade)
    api             api?            @relation("star_api", fields: [apiId], references: [id], onDelete: Cascade)
    comment         comment?        @relation("star_comment", fields: [commentId], references: [id], onDelete: Cascade)
    organization    organization?   @relation("star_organization", fields: [organizationId], references: [id], onDelete: Cascade)
    project         project?        @relation("star_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine         routine?        @relation("star_routine", fields: [routineId], references: [id], onDelete: Cascade)
    smartContract   smart_contract? @relation("star_smart_contract", fields: [smartContractId], references: [id], onDelete: Cascade)
    standard        standard?       @relation("star_standard", fields: [standardId], references: [id], onDelete: Cascade)
    tag             tag?            @relation("star_tag", fields: [tagId], references: [id], onDelete: Cascade)
    user            user?           @relation("star_user", fields: [userId], references: [id], onDelete: Cascade)
}

model tag {
    id              String                @id @default(uuid()) @db.Uuid
    created_at      DateTime              @default(now()) @db.Timestamptz(6)
    updated_at      DateTime              @default(now()) @db.Timestamptz(6)
    tag             String                @unique @db.VarChar(128)
    createdByUserId String?               @db.Uuid
    stars           Int                   @default(0)
    createdByUser   user?                 @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    apis            api_tags[]
    organizations   organization_tags[]
    projects        project_tags[]
    reports         report[]
    routines        routine_tags[]
    smartContracts  smart_contract_tags[]
    standards       standard_tags[]
    starredBy       star[]                @relation("star_tag")
    translations    tag_translation[]
    hiddenBy        user_tag_hidden[]
}

model tag_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    tagId       String  @db.Uuid
    language    String  @db.VarChar(3)
    tag         tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([tagId, language])
}

model user {
    id                             String               @id @default(uuid()) @db.Uuid
    created_at                     DateTime             @default(now()) @db.Timestamptz(6)
    updated_at                     DateTime             @default(now()) @db.Timestamptz(6)
    confirmationCode               String?              @unique @db.VarChar(256)
    confirmationCodeDate           DateTime?            @db.Timestamptz(6)
    lastExport                     DateTime?            @db.Timestamptz(6)
    lastLoginAttempt               DateTime             @default(now()) @db.Timestamptz(6)
    lastResetPasswordReqestAttempt DateTime?            @db.Timestamptz(6)
    logInAttempts                  Int                  @default(0)
    lastSessionVerified            DateTime?            @db.Timestamptz(6)
    numExports                     Int                  @default(0)
    password                       String?              @db.VarChar(256)
    resetPasswordCode              String?              @unique @db.VarChar(256)
    sessionToken                   String?              @db.VarChar(1024)
    name                           String               @db.VarChar(128)
    theme                          String               @default("light") @db.VarChar(255)
    handle                         String?              @unique @db.VarChar(16)
    stars                          Int                  @default(0)
    views                          Int                  @default(0)
    status                         AccountStatus        @default(Unlocked)
    apis                           api[]
    apiKeys                        api_key[]
    comments                       comment[]
    emails                         email[]
    organizations                  organization_users[]
    projectsCreated                project[]            @relation("project_user_creator")
    projects                       project[]            @relation("project_user_owner")
    sentReports                    report[]             @relation("report_from")
    reports                        report[]
    reportResponses                report_response[]
    resourceLists                  resource_list[]
    routinesCreated                routine[]            @relation("routine_user_creator")
    routines                       routine[]            @relation("routine_user_owner")
    runs                           run[]                @relation("run_user")
    smartContractsCreated          smart_contract[]     @relation("smart_contract_user_creator")
    smartContracts                 smart_contract[]     @relation("smart_contract_user_owner")
    standards                      standard[]
    starred                        star[]               @relation("star_by")
    starredBy                      star[]               @relation("star_user")
    tags                           tag[]
    labels                         label[]
    notes                          note[]
    languages                      user_language[]
    roles                          user_roles[]
    hiddenTags                     user_tag_hidden[]
    translations                   user_translation[]
    viewed                         view[]               @relation("view_by")
    viewedBy                       view[]               @relation("view_user")
    votes                          vote[]               @relation("vote_by")
    wallets                        wallet[]
}

model user_translation {
    id       String  @id @default(uuid()) @db.Uuid
    bio      String? @db.VarChar(2048)
    userId   String  @db.Uuid
    language String  @db.VarChar(3)
    user     user    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language])
}

model user_language {
    id       String @id @default(uuid()) @db.Uuid
    userId   String @db.Uuid
    language String @db.VarChar(3)
    user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language])
}

model user_roles {
    id         String   @id @default(uuid()) @db.Uuid
    created_at DateTime @default(now()) @db.Timestamptz(6)
    updated_at DateTime @default(now()) @db.Timestamptz(6)
    userId     String   @db.Uuid
    roleId     String   @db.Uuid
    user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role       role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId], name: "user_roles_userid_roleid_unique")
}

model user_tag_hidden {
    id     String  @id @default(uuid()) @db.Uuid
    isBlur Boolean @default(true)
    userId String  @db.Uuid
    tagId  String  @db.Uuid
    tag    tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
    user   user    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, tagId], name: "user_tags_hidden_userid_tagid_unique")
}

model view {
    id              String          @id @default(uuid()) @db.Uuid
    lastViewed      DateTime        @default(now()) @db.Timestamptz(6)
    title           String          @db.VarChar(128)
    byId            String          @db.Uuid
    apiId           String?         @db.Uuid
    organizationId  String?         @db.Uuid
    projectId       String?         @db.Uuid
    routineId       String?         @db.Uuid
    smartContractId String?         @db.Uuid
    standardId      String?         @db.Uuid
    userId          String?         @db.Uuid
    by              user            @relation("view_by", fields: [byId], references: [id], onDelete: Cascade)
    api             api?            @relation("view_api", fields: [apiId], references: [id], onDelete: Cascade)
    organization    organization?   @relation("view_organization", fields: [organizationId], references: [id], onDelete: Cascade)
    project         project?        @relation("view_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine         routine?        @relation("view_routine", fields: [routineId], references: [id], onDelete: Cascade)
    smartContract   smart_contract? @relation("view_smart_contract", fields: [smartContractId], references: [id], onDelete: Cascade)
    standard        standard?       @relation("view_standard", fields: [standardId], references: [id], onDelete: Cascade)
    user            user?           @relation("view_user", fields: [userId], references: [id], onDelete: Cascade)

    @@unique([byId, organizationId, projectId, routineId, standardId, userId])
}

model vote {
    id              String          @id @default(uuid()) @db.Uuid
    isUpvote        Boolean         @default(true)
    byId            String          @db.Uuid
    apiId           String?         @db.Uuid
    commentId       String?         @db.Uuid
    projectId       String?         @db.Uuid
    routineId       String?         @db.Uuid
    smartContractId String?         @db.Uuid
    standardId      String?         @db.Uuid
    by              user            @relation("vote_by", fields: [byId], references: [id], onDelete: Cascade)
    api             api?            @relation("vote_api", fields: [apiId], references: [id], onDelete: Cascade)
    comment         comment?        @relation("vote_comment", fields: [commentId], references: [id], onDelete: Cascade)
    project         project?        @relation("vote_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine         routine?        @relation("vote_routine", fields: [routineId], references: [id], onDelete: Cascade)
    smartContract   smart_contract? @relation("vote_smart_contract", fields: [smartContractId], references: [id], onDelete: Cascade)
    standard        standard?       @relation("vote_standard", fields: [standardId], references: [id], onDelete: Cascade)
}

model wallet {
    id                String        @id @default(uuid()) @db.Uuid
    stakingAddress    String        @unique @db.VarChar(128)
    publicAddress     String?       @unique @db.VarChar(128)
    name              String?       @db.VarChar(128)
    nonce             String?       @db.VarChar(8092)
    nonceCreationTime DateTime?     @db.Timestamptz(6)
    verified          Boolean       @default(false)
    lastVerifiedTime  DateTime?     @db.Timestamptz(6)
    wasReported       Boolean       @default(false)
    userId            String?       @db.Uuid
    organizationId    String?       @db.Uuid
    projectId         String?       @db.Uuid
    created_at        DateTime      @default(now()) @db.Timestamptz(6)
    updated_at        DateTime      @default(now()) @db.Timestamptz(6)
    organization      organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    project           project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user              user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    handles           handle[]
}

enum AccountStatus {
    Deleted
    Unlocked
    SoftLocked
    HardLocked
}

enum NodeType {
    End
    Redirect
    RoutineList
    Start
}

enum PeriodType {
    Daily
    Weekly
    Monthly
    Yearly
}

enum ReportStatus {
    Closed
    Open
}

enum ReportSuggestedAction {
    Delete
    FalseReport
    HideUntilFixed
    NonIssue
    SuspendUser
}

enum ResourceUsedFor {
    Community
    Context
    Developer
    Donation
    ExternalService
    Feed
    Install
    Learning
    Notes
    OfficialWebsite
    Proposal
    Related
    Researching
    Scheduling
    Social
    Tutorial
}

enum ResourceListUsedFor {
    Custom
    Display
    Learn
    Research
    Develop
}

enum RunStatus {
    Scheduled
    InProgress
    Completed
    Failed
    Cancelled
}

enum RunStepStatus {
    InProgress
    Completed
    Skipped
}
