generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DB_URL")
    extensions = [pgvector(map: "vector"), citext(map: "citext")]
}

model award {
    id                       String        @id @default(uuid()) @db.Uuid
    created_at               DateTime      @default(now()) @db.Timestamptz(6)
    updated_at               DateTime      @default(now()) @db.Timestamptz(6)
    timeCurrentTierCompleted DateTime?     @db.Timestamptz(6)
    category                 AwardCategory
    progress                 Int           @default(0)
    userId                   String        @db.Uuid
    user                     user?         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, category])
}

model api {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    completedAt        DateTime?                   @db.Timestamptz(6)
    score              Int                         @default(0)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    hasBeenTransferred Boolean                     @default(false)
    hasCompleteVersion Boolean                     @default(false)
    isDeleted          Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    permissions        String                      @db.VarChar(4096)
    createdById        String?                     @db.Uuid
    ownedByTeamId      String?                     @db.Uuid
    ownedByUserId      String?                     @db.Uuid
    parentId           String?                     @db.Uuid
    createdBy          user?                       @relation("api_createdBy", fields: [createdById], references: [id], onDelete: Cascade)
    ownedByTeam        team?                       @relation("api_ownedByTeam", fields: [ownedByTeamId], references: [id])
    ownedByUser        user?                       @relation("api_ownedByUser", fields: [ownedByUserId], references: [id])
    parent             api_version?                @relation("api_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    tags               api_tags[]
    issues             issue[]
    bookmarkedBy       bookmark[]                  @relation("bookmark_api")
    reactions          reaction[]                  @relation("reaction_api")
    reactionSummaries  reaction_summary[]          @relation("reaction_summary_api")
    viewedBy           view[]                      @relation("view_api")
    pullRequests       pull_request[]
    versions           api_version[]
    labels             api_labels[]
    stats              stats_api[]
    questions          question[]
    transfers          transfer[]                  @relation("transfer_api")
    subscriptions      notification_subscription[]
}

model api_labels {
    id         String @id @default(uuid()) @db.Uuid
    labelledId String @db.Uuid
    labelId    String @db.Uuid
    labelled   api    @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "api_labels_labelledid_labelid_unique")
}

model api_tags {
    id       String @id @default(uuid()) @db.Uuid
    taggedId String @db.Uuid
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   api    @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "api_tags_taggedid_tagTag_unique")
}

model api_version {
    id                      String                      @id @default(uuid()) @db.Uuid
    created_at              DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                    @default(now()) @db.Timestamptz(6)
    completedAt             DateTime?                   @db.Timestamptz(6)
    callLink                String                      @unique @db.VarChar(1024)
    documentationLink       String?                     @db.VarChar(1024)
    schemaLanguage          String?                     @db.VarChar(128)
    schemaText              String?                     @db.VarChar(16384)
    isComplete              Boolean                     @default(false)
    isDeleted               Boolean                     @default(false)
    isLatest                Boolean                     @default(false)
    isLatestPublic          Boolean                     @default(false)
    isPrivate               Boolean                     @default(false)
    rootId                  String                      @db.Uuid
    resourceListId          String?                     @unique @db.Uuid
    versionIndex            Int                         @default(0)
    versionLabel            String                      @default("1.0.0") @db.VarChar(16)
    versionNotes            String?                     @db.VarChar(4096)
    pullRequestId           String?                     @unique @db.Uuid
    calledByRoutineVersions routine_version[]
    comments                comment[]
    reports                 report[]
    root                    api                         @relation(fields: [rootId], references: [id], onDelete: Cascade)
    forks                   api[]                       @relation("api_version_fork")
    intendToPullRequest     Boolean                     @default(false)
    resourceList            resource_list?              @relation("resource_list_api_version", fields: [resourceListId], references: [id], onDelete: SetNull)
    pullRequest             pull_request?               @relation("pull_request_from_api_version", fields: [pullRequestId], references: [id], onDelete: SetNull)
    translations            api_version_translation[]
    directoryListings       project_version_directory[]

    @@unique([rootId, versionIndex], name: "api_version_rootId_versionIndex_unique")
}

model api_version_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    name                 String                      @db.VarChar(128)
    summary              String?                     @db.VarChar(1024)
    details              String?                     @db.VarChar(8192)
    language             String                      @db.VarChar(3)
    apiVersionId         String                      @db.Uuid
    apiVersion           api_version                 @relation(fields: [apiVersionId], references: [id], onDelete: Cascade)
}

model api_key {
    id                     String   @id @default(uuid()) @db.Uuid
    created_at             DateTime @default(now()) @db.Timestamptz(6)
    updated_at             DateTime @default(now()) @db.Timestamptz(6)
    key                    String   @unique @db.VarChar(255)
    creditsUsedBeforeLimit BigInt   @default(10000000000)
    stopAtLimit            Boolean  @default(true)
    absoluteMax            Int?     @default(25000000000)
    teamId                 String?  @db.Uuid
    userId                 String?  @db.Uuid
    team                   team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                   user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model bookmark {
    id               String           @id @default(uuid()) @db.Uuid
    created_at       DateTime         @default(now()) @db.Timestamptz(6)
    updated_at       DateTime         @default(now()) @db.Timestamptz(6)
    listId           String?          @db.Uuid
    apiId            String?          @db.Uuid
    codeId           String?          @db.Uuid
    commentId        String?          @db.Uuid
    issueId          String?          @db.Uuid
    noteId           String?          @db.Uuid
    postId           String?          @db.Uuid
    projectId        String?          @db.Uuid
    questionId       String?          @db.Uuid
    questionAnswerId String?          @db.Uuid
    quizId           String?          @db.Uuid
    routineId        String?          @db.Uuid
    standardId       String?          @db.Uuid
    tagId            String?          @db.Uuid
    teamId           String?          @db.Uuid
    userId           String?          @db.Uuid
    list             bookmark_list?   @relation("bookmark_list", fields: [listId], references: [id], onDelete: Cascade)
    api              api?             @relation("bookmark_api", fields: [apiId], references: [id], onDelete: Cascade)
    code             code?            @relation("bookmark_code", fields: [codeId], references: [id], onDelete: Cascade)
    comment          comment?         @relation("bookmark_comment", fields: [commentId], references: [id], onDelete: Cascade)
    issue            issue?           @relation("bookmark_issue", fields: [issueId], references: [id], onDelete: Cascade)
    note             note?            @relation("bookmark_note", fields: [noteId], references: [id], onDelete: Cascade)
    post             post?            @relation("bookmark_post", fields: [postId], references: [id], onDelete: Cascade)
    project          project?         @relation("bookmark_project", fields: [projectId], references: [id], onDelete: Cascade)
    question         question?        @relation("bookmark_question", fields: [questionId], references: [id], onDelete: Cascade)
    questionAnswer   question_answer? @relation("bookmark_question_answer", fields: [questionAnswerId], references: [id], onDelete: Cascade)
    quiz             quiz?            @relation("bookmark_quiz", fields: [quizId], references: [id], onDelete: Cascade)
    routine          routine?         @relation("bookmark_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard         standard?        @relation("bookmark_standard", fields: [standardId], references: [id], onDelete: Cascade)
    tag              tag?             @relation("bookmark_tag", fields: [tagId], references: [id], onDelete: Cascade)
    team             team?            @relation("bookmark_team", fields: [teamId], references: [id], onDelete: Cascade)
    user             user?            @relation("bookmark_user", fields: [userId], references: [id], onDelete: Cascade)
}

model bookmark_list {
    id         String     @id @default(uuid()) @db.Uuid
    created_at DateTime   @default(now()) @db.Timestamptz(6)
    updated_at DateTime   @default(now()) @db.Timestamptz(6)
    index      Int
    label      String     @db.VarChar(128)
    userId     String     @db.Uuid
    bookmarks  bookmark[] @relation("bookmark_list")
    user       user       @relation("bookmark_list_user", fields: [userId], references: [id], onDelete: Cascade)

    @@unique([label], name: "bookmark_list_label_unique")
}

model chat {
    id                     String                      @id @default(uuid()) @db.Uuid
    created_at             DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at             DateTime                    @default(now()) @db.Timestamptz(6)
    inviteId               String?                     @db.Uuid
    isPrivate              Boolean                     @default(true)
    openToAnyoneWithInvite Boolean                     @default(false)
    creatorId              String?                     @db.Uuid
    teamId                 String?                     @db.Uuid
    creator                user?                       @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    team                   team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    restrictedToRoles      chat_roles[]
    messages               chat_message[]
    participants           chat_participants[]
    invites                chat_invite[]
    labels                 chat_labels[]
    translations           chat_translation[]
    subscriptions          notification_subscription[]
}

model chat_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    chatId               String                      @db.Uuid
    chat                 chat                        @relation(fields: [chatId], references: [id], onDelete: Cascade)
    language             String                      @db.VarChar(3)
    name                 String?                     @db.VarChar(128)
    description          String?                     @db.VarChar(2048)

    @@unique([chatId, language], name: "chat_translation_chatid_language_unique")
}

model chat_message {
    id                String                     @id @default(uuid()) @db.Uuid
    created_at        DateTime                   @default(now()) @db.Timestamptz(6)
    updated_at        DateTime                   @default(now()) @db.Timestamptz(6)
    metadata          String?                    @db.VarChar(4096)
    score             Int                        @default(0)
    sequence          Int                        @default(autoincrement())
    versionIndex      Int                        @default(0)
    parentId          String?                    @db.Uuid
    userId            String?                    @db.Uuid
    chatId            String?                    @db.Uuid
    chat              chat?                      @relation(fields: [chatId], references: [id], onDelete: Cascade)
    parent            chat_message?              @relation("chat_message_parent", fields: [parentId], references: [id], onDelete: SetNull)
    children          chat_message[]             @relation("chat_message_parent")
    user              user?                      @relation("chat_message_user", fields: [userId], references: [id], onDelete: SetNull)
    translations      chat_message_translation[]
    reactions         reaction[]                 @relation("reaction_chat_message")
    reactionSummaries reaction_summary[]         @relation("reaction_summary_chat_message")
    reports           report[]
}

model chat_message_translation {
    id        String       @id @default(uuid()) @db.Uuid
    text      String       @db.VarChar(32768)
    language  String       @db.VarChar(3)
    messageId String       @db.Uuid
    message   chat_message @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@unique([messageId, language])
}

model chat_participants {
    id         String   @id @default(uuid()) @db.Uuid
    created_at DateTime @default(now()) @db.Timestamptz(6)
    updated_at DateTime @default(now()) @db.Timestamptz(6)
    hasUnread  Boolean  @default(true)
    chatId     String   @db.Uuid
    chat       chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
    userId     String   @db.Uuid
    user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId])
}

model chat_invite {
    id         String           @id @default(uuid()) @db.Uuid
    created_at DateTime         @default(now()) @db.Timestamptz(6)
    updated_at DateTime         @default(now()) @db.Timestamptz(6)
    status     ChatInviteStatus @default(Pending)
    message    String?          @db.VarChar(4096)
    chatId     String           @db.Uuid
    chat       chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
    userId     String           @db.Uuid
    user       user             @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId], name: "chat_invite_chatid_userid_unique")
}

model chat_labels {
    id         String @id @default(uuid()) @db.Uuid
    labelledId String @db.Uuid
    labelId    String @db.Uuid
    labelled   chat   @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "chat_labels_labelledid_labelid_unique")
}

model chat_roles {
    id     String @id @default(uuid()) @db.Uuid
    chatId String @db.Uuid
    chat   chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    roleId String @db.Uuid
    role   role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([chatId, roleId], name: "chat_roles_chatid_roleid_unique")
}

model code {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    hasBeenTransferred Boolean                     @default(false)
    hasCompleteVersion Boolean                     @default(false)
    completedAt        DateTime?                   @db.Timestamptz(6)
    isDeleted          Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    score              Int                         @default(0)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    permissions        String                      @db.VarChar(4096)
    createdById        String?                     @db.Uuid
    parentId           String?                     @db.Uuid
    ownedByTeamId      String?                     @db.Uuid
    ownedByUserId      String?                     @db.Uuid
    createdBy          user?                       @relation("code_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    issues             issue[]
    parent             code_version?               @relation("code_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    ownedByTeam        team?                       @relation("code_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: SetNull)
    ownedByUser        user?                       @relation("code_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: SetNull)
    labels             code_labels[]
    tags               code_tags[]
    bookmarkedBy       bookmark[]                  @relation("bookmark_code")
    versions           code_version[]
    viewedBy           view[]                      @relation("view_code")
    reactions          reaction[]                  @relation("reaction_code")
    reactionSummaries  reaction_summary[]          @relation("reaction_summary_code")
    pullRequests       pull_request[]
    stats              stats_code[]
    questions          question[]
    transfers          transfer[]                  @relation("transfer_code")
    subscriptions      notification_subscription[]
}

model code_version {
    id                      String                      @id @default(uuid()) @db.Uuid
    created_at              DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                    @default(now()) @db.Timestamptz(6)
    codeLanguage            String                      @db.VarChar(128)
    codeType                CodeType                    @default(DataConvert)
    completedAt             DateTime?                   @db.Timestamptz(6)
    default                 String?                     @db.VarChar(2048)
    content                 String                      @db.VarChar(8192)
    isLatest                Boolean                     @default(false)
    isLatestPublic          Boolean                     @default(false)
    resourceListId          String?                     @unique @db.Uuid
    rootId                  String                      @db.Uuid
    versionIndex            Int                         @default(0)
    versionLabel            String                      @default("1.0.0") @db.VarChar(16)
    versionNotes            String?                     @db.VarChar(4096)
    intendToPullRequest     Boolean                     @default(false)
    pullRequestId           String?                     @unique @db.Uuid
    isComplete              Boolean                     @default(false)
    isDeleted               Boolean                     @default(false)
    isPrivate               Boolean                     @default(false)
    calledByRoutineVersions routine_version[]
    comments                comment[]
    contract                code_version_contract?
    forks                   code[]                      @relation("code_version_fork")
    pullRequest             pull_request?               @relation("pull_request_from_code_version", fields: [pullRequestId], references: [id], onDelete: SetNull)
    reports                 report[]
    root                    code                        @relation(fields: [rootId], references: [id], onDelete: Cascade)
    resourceList            resource_list?              @relation("resource_list_code_version", fields: [resourceListId], references: [id], onDelete: SetNull)
    translations            code_version_translation[]
    directoryListings       project_version_directory[]

    @@unique([rootId, versionIndex], name: "code_version_rootId_versionIndex_unique")
}

model code_version_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    name                 String                      @db.VarChar(128)
    description          String?                     @db.VarChar(2048)
    jsonVariable         String?                     @db.VarChar(8192)
    codeVersionId        String                      @db.Uuid
    language             String                      @db.VarChar(3)
    codeVersion          code_version                @relation(fields: [codeVersionId], references: [id], onDelete: Cascade)

    @@unique([codeVersionId, language])
}

model code_version_contract {
    id                String       @id @default(uuid()) @db.Uuid
    address           String?      @db.VarChar(256)
    blockchain        String       @db.VarChar(128)
    codeVersionId     String       @unique @db.Uuid
    contractType      String?      @db.VarChar(256)
    hash              String?      @db.VarChar(256)
    isAddressVerified Boolean      @default(false)
    isHashVerified    Boolean      @default(false)
    codeVersion       code_version @relation(fields: [codeVersionId], references: [id], onDelete: Cascade)
}

model code_tags {
    id       String @id @default(uuid()) @db.Uuid
    taggedId String @db.Uuid
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   code   @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "code_tags_taggedid_tagTag_unique")
}

model code_labels {
    id         String @id @default(uuid()) @db.Uuid
    labelledId String @db.Uuid
    labelId    String @db.Uuid
    labelled   code   @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "code_labels_labelledid_labelid_unique")
}

model comment {
    id                String                      @id @default(uuid()) @db.Uuid
    created_at        DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at        DateTime                    @default(now()) @db.Timestamptz(6)
    ownedByTeamId     String?                     @db.Uuid
    ownedByUserId     String?                     @db.Uuid
    apiVersionId      String?                     @db.Uuid
    codeVersionId     String?                     @db.Uuid
    issueId           String?                     @db.Uuid
    noteVersionId     String?                     @db.Uuid
    parentId          String?                     @db.Uuid
    postId            String?                     @db.Uuid
    projectVersionId  String?                     @db.Uuid
    pullRequestId     String?                     @db.Uuid
    questionId        String?                     @db.Uuid
    questionAnswerId  String?                     @db.Uuid
    routineVersionId  String?                     @db.Uuid
    standardVersionId String?                     @db.Uuid
    score             Int                         @default(0)
    bookmarks         Int                         @default(0)
    apiVersion        api_version?                @relation(fields: [apiVersionId], references: [id], onDelete: Cascade)
    codeVersion       code_version?               @relation(fields: [codeVersionId], references: [id], onDelete: Cascade)
    issue             issue?                      @relation(fields: [issueId], references: [id], onDelete: Cascade)
    noteVersion       note_version?               @relation(fields: [noteVersionId], references: [id], onDelete: Cascade)
    parent            comment?                    @relation("comment_parent", fields: [parentId], references: [id], onDelete: Cascade)
    post              post?                       @relation(fields: [postId], references: [id], onDelete: Cascade)
    projectVersion    project_version?            @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)
    pullRequest       pull_request?               @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
    question          question?                   @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionAnswer    question_answer?            @relation(fields: [questionAnswerId], references: [id], onDelete: Cascade)
    routineVersion    routine_version?            @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    standardVersion   standard_version?           @relation(fields: [standardVersionId], references: [id], onDelete: Cascade)
    ownedByTeam       team?                       @relation("comment_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: SetNull)
    ownedByUser       user?                       @relation("comment_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: SetNull)
    translations      comment_translation[]
    reports           report[]
    bookmarkedBy      bookmark[]                  @relation("bookmark_comment")
    reactions         reaction[]                  @relation("reaction_comment")
    reactionSummaries reaction_summary[]          @relation("reaction_summary_comment")
    parents           comment[]                   @relation("comment_parent")
    subscriptions     notification_subscription[]
}

model comment_translation {
    id        String  @id @default(uuid()) @db.Uuid
    text      String  @db.VarChar(32768)
    language  String  @db.VarChar(3)
    commentId String  @db.Uuid
    comment   comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([commentId, language])
}

model email {
    id                                 String    @id @default(uuid()) @db.Uuid
    created_at                         DateTime  @default(now()) @db.Timestamptz(6)
    updated_at                         DateTime  @default(now()) @db.Timestamptz(6)
    emailAddress                       String    @unique @db.Citext
    verified                           Boolean   @default(false)
    lastVerifiedTime                   DateTime? @db.Timestamptz(6)
    verificationCode                   String?   @db.VarChar(256)
    lastVerificationCodeRequestAttempt DateTime? @db.Timestamptz(6)
    teamId                             String?   @db.Uuid
    userId                             String?   @db.Uuid
    team                               team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                               user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model focus_mode {
    id             String              @id @default(uuid()) @db.Uuid
    created_at     DateTime            @default(now()) @db.Timestamptz(6)
    updated_at     DateTime            @default(now()) @db.Timestamptz(6)
    name           String              @db.VarChar(128)
    description    String?             @db.VarChar(2048)
    reminderListId String?             @unique @db.Uuid
    resourceListId String?             @unique @db.Uuid
    scheduleId     String?             @db.Uuid
    userId         String              @db.Uuid
    reminderList   reminder_list?      @relation(fields: [reminderListId], references: [id], onDelete: SetNull)
    resourceList   resource_list?      @relation("resource_list_focus_mode", fields: [resourceListId], references: [id], onDelete: SetNull)
    schedule       schedule?           @relation("focus_mode_schedule", fields: [scheduleId], references: [id], onDelete: SetNull)
    user           user                @relation(fields: [userId], references: [id], onDelete: Cascade)
    labels         focus_mode_labels[]
    filters        focus_mode_filter[]
}

model focus_mode_labels {
    id         String     @id @default(uuid()) @db.Uuid
    labelledId String     @db.Uuid
    labelId    String     @db.Uuid
    labelled   focus_mode @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label      @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "focus_mode_labels_labelledid_labelid_unique")
}

model focus_mode_filter {
    id          String              @id @default(uuid()) @db.Uuid
    filterType  FocusModeFilterType
    focusModeId String              @db.Uuid
    tagId       String              @db.Uuid
    focusMode   focus_mode          @relation(fields: [focusModeId], references: [id], onDelete: Cascade)
    tag         tag                 @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([focusModeId, tagId], name: "focus_mode_filter_focusModeId_tagid_unique")
}

model issue {
    id                      String                      @id @default(uuid()) @db.Uuid
    status                  IssueStatus                 @default(Open)
    created_at              DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                    @updatedAt @db.Timestamptz(6)
    closedAt                DateTime?                   @db.Timestamptz(6)
    hasBeenClosedOrRejected Boolean                     @default(false)
    score                   Int                         @default(0)
    bookmarks               Int                         @default(0)
    views                   Int                         @default(0)
    apiId                   String?                     @db.Uuid
    codeId                  String?                     @db.Uuid
    noteId                  String?                     @db.Uuid
    projectId               String?                     @db.Uuid
    routineId               String?                     @db.Uuid
    standardId              String?                     @db.Uuid
    teamId                  String?                     @db.Uuid
    closedById              String?                     @db.Uuid
    createdById             String?                     @db.Uuid
    referencedVersionId     String?                     @db.Uuid
    api                     api?                        @relation(fields: [apiId], references: [id], onDelete: Cascade)
    code                    code?                       @relation(fields: [codeId], references: [id], onDelete: Cascade)
    note                    note?                       @relation(fields: [noteId], references: [id], onDelete: Cascade)
    project                 project?                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine                 routine?                    @relation(fields: [routineId], references: [id], onDelete: Cascade)
    standard                standard?                   @relation(fields: [standardId], references: [id], onDelete: Cascade)
    closedBy                user?                       @relation("issue_closedBy", fields: [closedById], references: [id], onDelete: Cascade)
    createdBy               user?                       @relation("issue_createdBy", fields: [createdById], references: [id], onDelete: Cascade)
    comments                comment[]
    labels                  issue_labels[]
    reports                 report[]
    team                    team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    translations            issue_translation[]
    reactions               reaction[]                  @relation("reaction_issue")
    reactionSummaries       reaction_summary[]          @relation("reaction_summary_issue")
    bookmarkedBy            bookmark[]                  @relation("bookmark_issue")
    viewedBy                view[]                      @relation("view_issue")
    subscriptions           notification_subscription[]
}

model issue_labels {
    id         String @id @default(uuid()) @db.Uuid
    labelledId String @db.Uuid
    labelId    String @db.Uuid
    labelled   issue  @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "issue_labels_labelledid_labelid_unique")
}

model issue_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(2048)
    name                 String?                     @db.VarChar(128)
    issueId              String                      @db.Uuid
    language             String                      @db.VarChar(3)
    issue                issue                       @relation(fields: [issueId], references: [id], onDelete: Cascade)

    @@unique([issueId, language])
}

model label {
    id            String              @id @default(uuid()) @db.Uuid
    created_at    DateTime            @default(now()) @db.Timestamptz(6)
    updated_at    DateTime            @default(now()) @db.Timestamptz(6)
    label         String              @unique @db.VarChar(128)
    color         String?             @db.VarChar(7)
    ownedByTeamId String?             @db.Uuid
    ownedByUserId String?             @db.Uuid
    apis          api_labels[]
    codes         code_labels[]
    chats         chat_labels[]
    issues        issue_labels[]
    meetings      meeting_labels[]
    notes         note_labels[]
    projects      project_labels[]
    routines      routine_labels[]
    schedules     schedule_labels[]
    standards     standard_labels[]
    focusModes    focus_mode_labels[]
    ownedByTeam   team?               @relation(fields: [ownedByTeamId], references: [id], onDelete: Cascade)
    ownedByUser   user?               @relation(fields: [ownedByUserId], references: [id], onDelete: Cascade)
    translations  label_translation[]

    @@unique([label, ownedByUserId, ownedByTeamId])
}

model label_translation {
    id          String @id @default(uuid()) @db.Uuid
    description String @db.VarChar(2048)
    labelId     String @db.Uuid
    language    String @db.VarChar(3)
    label       label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelId, language])
}

model node {
    id               String             @id @default(uuid()) @db.Uuid
    created_at       DateTime           @default(now()) @db.Timestamptz(6)
    updated_at       DateTime           @default(now()) @db.Timestamptz(6)
    columnIndex      Int?
    rowIndex         Int?
    nodeType         NodeType
    runConditions    String?            @db.VarChar(4096)
    voteConditions   String?            @db.VarChar(4096)
    routineVersionId String             @db.Uuid
    routineVersion   routine_version    @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    end              node_end?
    previous         node_link[]        @relation("node_previous")
    next             node_link[]        @relation("node_next")
    loop             node_loop?
    routineList      node_routine_list?
    translations     node_translation[]
    runSteps         run_routine_step[] @relation("run_routine_step_node")
}

model node_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    name        String  @default("Name Me") @db.VarChar(128)
    language    String  @db.VarChar(3)
    nodeId      String  @db.Uuid
    node        node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)

    @@unique([nodeId, language])
}

model node_end {
    id                           String          @id @default(uuid()) @db.Uuid
    wasSuccessful                Boolean         @default(true)
    suggestedNextRoutineVersions node_end_next[] @relation("node_end_next_from")
    nodeId                       String          @unique @db.Uuid
    node                         node            @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model node_end_next {
    id                 String          @id @default(uuid()) @db.Uuid
    fromEndId          String          @db.Uuid
    toRoutineVersionId String          @db.Uuid
    fromEnd            node_end        @relation("node_end_next_from", fields: [fromEndId], references: [id], onDelete: Cascade)
    toRoutineVersion   routine_version @relation("node_end_next_to", fields: [toRoutineVersionId], references: [id], onDelete: Cascade)

    @@unique([fromEndId, toRoutineVersionId])
}

model node_link {
    id               String           @id @default(uuid()) @db.Uuid
    fromId           String           @db.Uuid
    operation        String?          @db.VarChar(512)
    routineVersionId String           @db.Uuid
    toId             String           @db.Uuid
    from             node             @relation("node_previous", fields: [fromId], references: [id], onDelete: Cascade)
    routineVersion   routine_version  @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    to               node             @relation("node_next", fields: [toId], references: [id], onDelete: Cascade)
    whens            node_link_when[]
}

model node_link_when {
    id           String                       @id @default(uuid()) @db.Uuid
    linkId       String                       @db.Uuid
    condition    String                       @db.VarChar(8192)
    link         node_link                    @relation(fields: [linkId], references: [id], onDelete: Cascade)
    translations node_link_when_translation[]
}

model node_link_when_translation {
    id          String         @id @default(uuid()) @db.Uuid
    description String?        @db.VarChar(2048)
    name        String         @db.VarChar(128)
    language    String         @db.VarChar(3)
    whenId      String         @db.Uuid
    when        node_link_when @relation(fields: [whenId], references: [id], onDelete: Cascade)

    @@unique([whenId, language])
}

model node_loop {
    id        String            @id @default(uuid()) @db.Uuid
    loops     Int?              @default(1)
    maxLoops  Int?              @default(1)
    operation String?           @db.VarChar(512)
    nodeId    String            @unique @db.Uuid
    node      node              @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    whiles    node_loop_while[]
}

model node_loop_while {
    id           String                        @id @default(uuid()) @db.Uuid
    loopId       String                        @db.Uuid
    condition    String                        @db.VarChar(8192)
    loop         node_loop                     @relation(fields: [loopId], references: [id], onDelete: Cascade)
    translations node_loop_while_translation[]
}

model node_loop_while_translation {
    id          String          @id @default(uuid()) @db.Uuid
    description String          @db.VarChar(2048)
    name        String          @db.VarChar(128)
    language    String          @db.VarChar(3)
    whileId     String          @db.Uuid
    while       node_loop_while @relation(fields: [whileId], references: [id], onDelete: Cascade)
}

model node_routine_list {
    id         String                   @id @default(uuid()) @db.Uuid
    isOrdered  Boolean                  @default(false)
    isOptional Boolean                  @default(false)
    nodeId     String                   @unique @db.Uuid
    node       node                     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    items      node_routine_list_item[]
}

model node_routine_list_item {
    id               String                               @id @default(uuid()) @db.Uuid
    index            Int
    isOptional       Boolean                              @default(false)
    listId           String                               @db.Uuid
    routineVersionId String                               @db.Uuid
    list             node_routine_list                    @relation(fields: [listId], references: [id], onDelete: Cascade)
    routineVersion   routine_version                      @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    translations     node_routine_list_item_translation[]

    @@unique([listId, routineVersionId], name: "node_routine_list_item_listid_routineVersionid_unique")
}

model node_routine_list_item_translation {
    id          String                 @id @default(uuid()) @db.Uuid
    description String?                @db.VarChar(2048)
    name        String?                @db.VarChar(128)
    language    String                 @db.VarChar(3)
    itemId      String                 @db.Uuid
    item        node_routine_list_item @relation(fields: [itemId], references: [id], onDelete: Cascade)

    @@unique([itemId, language])
}

model note {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    hasBeenTransferred Boolean                     @default(false)
    hasCompleteVersion Boolean                     @default(false)
    completedAt        DateTime?                   @db.Timestamptz(6)
    isDeleted          Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    score              Int                         @default(0)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    permissions        String                      @db.VarChar(4096)
    parentId           String?                     @db.Uuid
    createdById        String?                     @db.Uuid
    ownedByTeamId      String?                     @db.Uuid
    ownedByUserId      String?                     @db.Uuid
    createdByTeamId    String?                     @db.Uuid
    parent             note_version?               @relation("note_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    createdBy          user?                       @relation("note_createdBy", fields: [createdById], references: [id], onDelete: Cascade)
    ownedByTeam        team?                       @relation("note_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: Cascade)
    ownedByUser        user?                       @relation("note_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: Cascade)
    versions           note_version[]
    pullRequests       pull_request[]
    labels             note_labels[]
    issues             issue[]
    tags               note_tags[]
    bookmarkedBy       bookmark[]                  @relation("bookmark_note")
    viewedBy           view[]                      @relation("view_note")
    reactions          reaction[]                  @relation("reaction_note")
    reactionSummaries  reaction_summary[]          @relation("reaction_summary_note")
    transfers          transfer[]                  @relation("transfer_note")
    subscriptions      notification_subscription[]
    questions          question[]
}

model note_labels {
    id         String @id @default(uuid()) @db.Uuid
    labelledId String @db.Uuid
    labelId    String @db.Uuid
    labelled   note   @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "note_labels_labelledid_labelid_unique")
}

model note_tags {
    id       String @id @default(uuid()) @db.Uuid
    taggedId String @db.Uuid
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   note   @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "note_tags_taggedid_tagTag_unique")
}

model note_version {
    id                  String                      @id @default(uuid()) @db.Uuid
    created_at          DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at          DateTime                    @default(now()) @db.Timestamptz(6)
    completedAt         DateTime?                   @db.Timestamptz(6)
    intendToPullRequest Boolean                     @default(true)
    isComplete          Boolean                     @default(false)
    isDeleted           Boolean                     @default(false)
    isLatest            Boolean                     @default(false)
    isLatestPublic      Boolean                     @default(false)
    isPrivate           Boolean                     @default(false)
    rootId              String                      @db.Uuid
    pullRequestId       String?                     @unique @db.Uuid
    versionIndex        Int                         @default(0)
    versionLabel        String                      @default("1.0.0") @db.VarChar(16)
    versionNotes        String?                     @db.VarChar(4096)
    root                note                        @relation(fields: [rootId], references: [id], onDelete: Cascade)
    forks               note[]                      @relation("note_version_fork")
    pullRequest         pull_request?               @relation("pull_request_from_note_version", fields: [pullRequestId], references: [id], onDelete: SetNull)
    comments            comment[]
    reports             report[]
    translations        note_version_translation[]
    directoryListings   project_version_directory[]

    @@unique([rootId, versionIndex], name: "note_version_rootId_versionIndex_unique")
}

model note_version_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    name                 String                      @db.VarChar(128)
    description          String?                     @db.VarChar(2048)
    language             String                      @db.VarChar(3)
    noteVersionId        String                      @db.Uuid
    noteVersion          note_version                @relation(fields: [noteVersionId], references: [id], onDelete: Cascade)
    pages                note_page[]
}

model note_page {
    id                   String                      @id @default(uuid()) @db.Uuid
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    pageIndex            Int                         @default(0)
    text                 String                      @db.VarChar(65536)
    translationId        String                      @db.Uuid
    translation          note_version_translation    @relation(fields: [translationId], references: [id], onDelete: Cascade)

    @@unique([translationId, pageIndex], name: "translationId_pageIndex_unique")
}

model notification {
    id          String   @id @default(uuid()) @db.Uuid
    created_at  DateTime @default(now()) @db.Timestamptz(6)
    updated_at  DateTime @default(now()) @db.Timestamptz(6)
    category    String   @db.VarChar(64)
    isRead      Boolean  @default(false)
    title       String   @db.VarChar(128)
    description String?  @db.VarChar(2048)
    count       Int      @default(1)
    link        String?  @db.VarChar(2048)
    imgLink     String?  @db.VarChar(2048)
    userId      String   @db.Uuid
    user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model push_device {
    id       String    @id @default(uuid()) @db.Uuid
    endpoint String    @unique @db.VarChar(1024)
    p256dh   String    @db.VarChar(1024)
    auth     String    @db.VarChar(1024)
    expires  DateTime? @db.Timestamptz(6)
    name     String?   @db.VarChar(128)
    userId   String    @db.Uuid
    user     user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notification_subscription {
    id            String        @id @default(uuid()) @db.Uuid
    created_at    DateTime      @default(now()) @db.Timestamptz(6)
    context       String?       @db.VarChar(2048)
    silent        Boolean       @default(false)
    apiId         String?       @db.Uuid
    chatId        String?       @db.Uuid
    codeId        String?       @db.Uuid
    commentId     String?       @db.Uuid
    issueId       String?       @db.Uuid
    meetingId     String?       @db.Uuid
    noteId        String?       @db.Uuid
    projectId     String?       @db.Uuid
    pullRequestId String?       @db.Uuid
    questionId    String?       @db.Uuid
    quizId        String?       @db.Uuid
    reportId      String?       @db.Uuid
    routineId     String?       @db.Uuid
    scheduleId    String?       @db.Uuid
    standardId    String?       @db.Uuid
    teamId        String?       @db.Uuid
    api           api?          @relation(fields: [apiId], references: [id], onDelete: Cascade)
    chat          chat?         @relation(fields: [chatId], references: [id], onDelete: Cascade)
    code          code?         @relation(fields: [codeId], references: [id], onDelete: Cascade)
    comment       comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
    issue         issue?        @relation(fields: [issueId], references: [id], onDelete: Cascade)
    meeting       meeting?      @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    note          note?         @relation(fields: [noteId], references: [id], onDelete: Cascade)
    project       project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    pullRequest   pull_request? @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
    question      question?     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    quiz          quiz?         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    report        report?       @relation(fields: [reportId], references: [id], onDelete: Cascade)
    routine       routine?      @relation(fields: [routineId], references: [id], onDelete: Cascade)
    schedule      schedule?     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
    standard      standard?     @relation(fields: [standardId], references: [id], onDelete: Cascade)
    team          team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
    subscriberId  String        @db.Uuid
    subscriber    user          @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
}

model team {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    bannerImage        String?                     @db.VarChar(2048)
    handle             String?                     @unique @db.Citext
    isOpenToNewMembers Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    permissions        String                      @db.VarChar(4096)
    profileImage       String?                     @db.VarChar(2048)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    parentId           String?                     @db.Uuid
    premiumId          String?                     @unique @db.Uuid
    resourceListId     String?                     @unique @db.Uuid
    createdById        String?                     @db.Uuid
    stripeCustomerId   String?                     @unique @db.VarChar(255)
    createdBy          user?                       @relation("team_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    chats              chat[]
    codes              code[]                      @relation("code_ownedByTeam")
    emails             email[]
    issues             issue[]
    labels             label[]
    notes              note[]                      @relation("note_ownedByTeam")
    apis               api[]                       @relation("api_ownedByTeam")
    apiKeys            api_key[]
    comments           comment[]                   @relation("comment_ownedByTeam")
    meetings           meeting[]
    paymentHistory     payment[]
    phones             phone[]
    posts              post[]
    premium            premium?                    @relation(fields: [premiumId], references: [id], onDelete: SetNull)
    tags               team_tags[]
    translations       team_translation[]
    members            member[]
    memberInvites      member_invite[]
    projects           project[]                   @relation("project_ownedByTeam")
    reports            report[]
    resourceList       resource_list?              @relation("resource_list_team", fields: [resourceListId], references: [id], onDelete: SetNull)
    routines           routine[]                   @relation("routine_ownedByTeam")
    runRoutines        run_routine[]               @relation("run_routine_team")
    runProjects        run_project[]               @relation("run_project_team")
    standards          standard[]                  @relation("standard_ownedByTeam")
    bookmarkedBy       bookmark[]                  @relation("bookmark_team")
    viewedBy           view[]                      @relation("view_team")
    wallets            wallet[]
    roles              role[]
    languages          team_language[]
    transfersIncoming  transfer[]                  @relation("transfer_to_team")
    transfersOutgoing  transfer[]                  @relation("transfer_from_team")
    stats              stats_team[]
    questions          question[]
    directoryListings  project_version_directory[]
    subscriptions      notification_subscription[]
    parent             team?                       @relation("team_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    forks              team[]                      @relation("team_version_fork")
}

model team_language {
    id       String @id @default(uuid()) @db.Uuid
    teamId   String @db.Uuid
    language String @db.VarChar(3)
    team     team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([teamId, language])
}

model meeting {
    id                     String                      @id @default(uuid()) @db.Uuid
    created_at             DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at             DateTime                    @default(now()) @db.Timestamptz(6)
    inviteId               String?                     @db.Uuid
    scheduleId             String?                     @db.Uuid
    openToAnyoneWithInvite Boolean                     @default(false)
    showOnTeamProfile      Boolean                     @default(false)
    teamId                 String                      @db.Uuid
    team                   team                        @relation(fields: [teamId], references: [id], onDelete: Cascade)
    restrictedToRoles      meeting_roles[]
    attendees              meeting_attendees[]
    invites                meeting_invite[]
    labels                 meeting_labels[]
    translations           meeting_translation[]
    schedule               schedule?                   @relation("meeting_schedule", fields: [scheduleId], references: [id], onDelete: SetNull)
    subscriptions          notification_subscription[]
}

model meeting_attendees {
    id        String  @id @default(uuid()) @db.Uuid
    meetingId String  @db.Uuid
    meeting   meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    userId    String  @db.Uuid
    user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([meetingId, userId])
}

model meeting_invite {
    id         String              @id @default(uuid()) @db.Uuid
    created_at DateTime            @default(now()) @db.Timestamptz(6)
    updated_at DateTime            @default(now()) @db.Timestamptz(6)
    status     MeetingInviteStatus @default(Pending)
    message    String?             @db.VarChar(4096)
    meetingId  String              @db.Uuid
    meeting    meeting             @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    userId     String              @db.Uuid
    user       user                @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([meetingId, userId], name: "meeting_invite_meetingid_userid_unique")
}

model meeting_labels {
    id         String  @id @default(uuid()) @db.Uuid
    labelledId String  @db.Uuid
    labelId    String  @db.Uuid
    labelled   meeting @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "meeting_labels_labelledid_labelid_unique")
}

model meeting_roles {
    id        String  @id @default(uuid()) @db.Uuid
    meetingId String  @db.Uuid
    meeting   meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    roleId    String  @db.Uuid
    role      role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([meetingId, roleId], name: "meeting_roles_meetingid_roleid_unique")
}

model meeting_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    meetingId            String                      @db.Uuid
    meeting              meeting                     @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    language             String                      @db.VarChar(3)
    name                 String?                     @db.VarChar(128)
    description          String?                     @db.VarChar(2048)
    link                 String?                     @db.VarChar(2048)

    @@unique([meetingId, language], name: "meeting_translation_meetingid_language_unique")
}

model team_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    bio                  String?                     @db.VarChar(2048)
    name                 String                      @db.VarChar(128)
    language             String                      @db.VarChar(3)
    teamId               String                      @db.Uuid
    team                 team                        @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([teamId, language])
}

model team_tags {
    id       String @id @default(uuid()) @db.Uuid
    taggedId String @db.Uuid
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   team   @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "team_tags_taggedid_tagTag_unique")
}

model member {
    id          String   @id @default(uuid()) @db.Uuid
    created_at  DateTime @default(now()) @db.Timestamptz(6)
    updated_at  DateTime @default(now()) @db.Timestamptz(6)
    isAdmin     Boolean  @default(false)
    permissions String   @db.VarChar(4096)
    teamId      String   @db.Uuid
    userId      String   @db.Uuid
    team        team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    roles       role[]

    @@unique([teamId, userId], name: "member_teamid_userid_unique")
}

model member_invite {
    id                  String             @id @default(uuid()) @db.Uuid
    created_at          DateTime           @default(now()) @db.Timestamptz(6)
    updated_at          DateTime           @default(now()) @db.Timestamptz(6)
    status              MemberInviteStatus @default(Pending)
    message             String?            @db.VarChar(4096)
    willBeAdmin         Boolean            @default(false)
    willHavePermissions String?            @db.VarChar(4096)
    teamId              String             @db.Uuid
    userId              String             @unique @db.Uuid
    team                team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                user               @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, teamId])
}

model post {
    id                String             @id @default(uuid()) @db.Uuid
    created_at        DateTime           @default(now()) @db.Timestamptz(6)
    updated_at        DateTime           @default(now()) @db.Timestamptz(6)
    repostedFromId    String?            @db.Uuid
    resourceListId    String?            @unique @db.Uuid
    isPinned          Boolean            @default(false)
    isPrivate         Boolean            @default(false)
    isDeleted         Boolean            @default(false)
    score             Int                @default(0)
    bookmarks         Int                @default(0)
    views             Int                @default(0)
    teamId            String?            @db.Uuid
    userId            String?            @db.Uuid
    team              team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user              user?              @relation(fields: [userId], references: [id], onDelete: Cascade)
    repostedFrom      post?              @relation("repost", fields: [repostedFromId], references: [id], onDelete: SetNull)
    reposts           post[]             @relation("repost")
    resourceList      resource_list?     @relation("resource_list_post", fields: [resourceListId], references: [id], onDelete: SetNull)
    comments          comment[]
    viewedBy          view[]             @relation("view_post")
    reactions         reaction[]         @relation("reaction_post")
    reactionSummaries reaction_summary[] @relation("reaction_summary_post")
    bookmarkedBy      bookmark[]         @relation("bookmark_post")
    reports           report[]
    tags              post_tags[]
    translations      post_translation[]
}

model post_tags {
    id       String @id @default(uuid()) @db.Uuid
    taggedId String @db.Uuid
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   post   @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "post_tags_taggedid_tagTag_unique")
}

model post_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(2048)
    name                 String                      @db.VarChar(128)
    language             String                      @db.VarChar(3)
    postId               String                      @db.Uuid
    post                 post                        @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([postId, language])
}

model phone {
    id                                 String    @id @default(uuid()) @db.Uuid
    phoneNumber                        String    @unique @db.VarChar(16)
    verified                           Boolean   @default(false)
    lastVerifiedTime                   DateTime? @db.Timestamptz(6)
    verificationCode                   String?   @db.VarChar(16)
    lastVerificationCodeRequestAttempt DateTime? @db.Timestamptz(6)
    teamId                             String?   @db.Uuid
    userId                             String?   @db.Uuid
    team                               team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                               user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model payment {
    id            String        @id @default(uuid()) @db.Uuid
    created_at    DateTime      @default(now()) @db.Timestamptz(6)
    updated_at    DateTime      @default(now()) @db.Timestamptz(6)
    amount        Int
    checkoutId    String        @db.VarChar(255)
    currency      String        @db.VarChar(255)
    description   String        @db.VarChar(2048)
    paymentMethod String        @db.VarChar(255)
    paymentType   PaymentType   @default(PremiumMonthly)
    status        PaymentStatus @default(Pending)
    teamId        String?       @db.Uuid
    userId        String?       @db.Uuid
    team          team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
    user          user?         @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model premium {
    id                   String    @id @default(uuid()) @db.Uuid
    credits              BigInt    @default(0)
    customPlan           String?   @db.VarChar(2048)
    enabledAt            DateTime? @db.Timestamptz(6)
    expiresAt            DateTime? @db.Timestamptz(6)
    hasReceivedFreeTrial Boolean   @default(false)
    isActive             Boolean   @default(false)
    team                 team?
    user                 user?
}

model project {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    hasBeenTransferred Boolean                     @default(false)
    hasCompleteVersion Boolean                     @default(false)
    isDeleted          Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    completedAt        DateTime?                   @db.Timestamptz(6)
    score              Int                         @default(0)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    permissions        String                      @db.VarChar(4096)
    createdById        String?                     @db.Uuid
    handle             String?                     @unique @db.Citext
    ownedByTeamId      String?                     @db.Uuid
    ownedByUserId      String?                     @db.Uuid
    parentId           String?                     @db.Uuid
    createdBy          user?                       @relation("project_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    ownedByTeam        team?                       @relation("project_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: SetNull)
    ownedByUser        user?                       @relation("project_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: SetNull)
    parent             project_version?            @relation("project_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    issues             issue[]
    labels             project_labels[]
    tags               project_tags[]
    versions           project_version[]
    bookmarkedBy       bookmark[]                  @relation("bookmark_project")
    viewedBy           view[]                      @relation("view_project")
    reactions          reaction[]                  @relation("reaction_project")
    reactionSummaries  reaction_summary[]          @relation("reaction_summary_project")
    pullRequests       pull_request[]
    stats              stats_project[]
    questions          question[]
    transfers          transfer[]                  @relation("transfer_project")
    quizzes            quiz[]
    subscriptions      notification_subscription[]
}

model project_version {
    id                         String                        @id @default(uuid()) @db.Uuid
    created_at                 DateTime                      @default(now()) @db.Timestamptz(6)
    updated_at                 DateTime                      @default(now()) @db.Timestamptz(6)
    completedAt                DateTime?                     @db.Timestamptz(6)
    complexity                 Int                           @default(1)
    intendToPullRequest        Boolean                       @default(false)
    isComplete                 Boolean                       @default(true)
    isDeleted                  Boolean                       @default(false)
    isLatest                   Boolean                       @default(false)
    isLatestPublic             Boolean                       @default(false)
    isPrivate                  Boolean                       @default(false)
    rootId                     String                        @db.Uuid
    simplicity                 Int                           @default(1)
    timesStarted               Int                           @default(0)
    timesCompleted             Int                           @default(0)
    resourceListId             String?                       @unique @db.Uuid
    pullRequestId              String?                       @unique @db.Uuid
    versionIndex               Int                           @default(0)
    versionLabel               String                        @default("1.0.0") @db.VarChar(16)
    versionNotes               String?                       @db.VarChar(4096)
    comments                   comment[]
    directories                project_version_directory[]   @relation("project_version_directory_project")
    directoryListings          project_version_directory[]   @relation("project_version_directory_listing")
    pullRequest                pull_request?                 @relation("pull_request_from_project_version", fields: [pullRequestId], references: [id], onDelete: SetNull)
    reports                    report[]
    resourceList               resource_list?                @relation("resource_list_project_version", fields: [resourceListId], references: [id], onDelete: SetNull)
    root                       project                       @relation(fields: [rootId], references: [id], onDelete: Cascade)
    forks                      project[]                     @relation("project_version_fork")
    translations               project_version_translation[]
    runProjects                run_project[]                 @relation("run_project_version")
    suggestedNextByProject     project_version_end_next[]    @relation("project_version_end_next_to")
    suggestedNextByProjectFrom project_version_end_next[]    @relation("project_version_end_next_from")

    @@unique([rootId, versionIndex], name: "project_version_rootId_versionIndex_unique")
}

model project_version_directory {
    id                    String                                  @id @default(uuid()) @db.Uuid
    created_at            DateTime                                @default(now()) @db.Timestamptz(6)
    updated_at            DateTime                                @default(now()) @db.Timestamptz(6)
    isRoot                Boolean                                 @default(false)
    parentDirectoryId     String?                                 @db.Uuid
    childOrder            String?                                 @db.VarChar(4096)
    projectVersionId      String                                  @db.Uuid
    parentDirectory       project_version_directory?              @relation("project_version_directory_parent", fields: [parentDirectoryId], references: [id], onDelete: SetNull)
    projectVersion        project_version                         @relation("project_version_directory_project", fields: [projectVersionId], references: [id], onDelete: Cascade)
    children              project_version_directory[]             @relation("project_version_directory_parent")
    childApiVersions      api_version[]
    childCodeVersions     code_version[]
    childNoteVersions     note_version[]
    childProjectVersions  project_version[]                       @relation("project_version_directory_listing")
    childRoutineVersions  routine_version[]
    childStandardVersions standard_version[]
    childTeams            team[]
    runProjectSteps       run_project_step[]                      @relation("run_project_step_directory")
    translations          project_version_directory_translation[]
}

model project_version_directory_translation {
    id                        String                    @id @default(uuid()) @db.Uuid
    description               String?                   @db.VarChar(2048)
    name                      String?                   @db.VarChar(128)
    language                  String                    @db.VarChar(3)
    projectVersionDirectoryId String                    @db.Uuid
    projectVersionDirectory   project_version_directory @relation(fields: [projectVersionDirectoryId], references: [id], onDelete: Cascade)

    @@unique([projectVersionDirectoryId, language])
}

model project_version_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(2048)
    name                 String                      @db.VarChar(128)
    language             String                      @db.VarChar(3)
    projectVersionId     String                      @db.Uuid
    projectVersion       project_version             @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)

    @@unique([projectVersionId, language])
}

model project_version_end_next {
    id                   String          @id @default(uuid()) @db.Uuid
    fromProjectVersionId String          @db.Uuid
    toProjectVersionId   String          @db.Uuid
    fromProjectVersion   project_version @relation("project_version_end_next_from", fields: [fromProjectVersionId], references: [id], onDelete: Cascade)
    toProjectVersion     project_version @relation("project_version_end_next_to", fields: [toProjectVersionId], references: [id], onDelete: Cascade)

    @@unique([fromProjectVersionId, toProjectVersionId])
}

model project_tags {
    id       String  @id @default(uuid()) @db.Uuid
    taggedId String  @db.Uuid
    tagTag   String  @db.VarChar(128)
    tag      tag     @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   project @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "project_tags_taggedid_tagTag_unique")
}

model project_labels {
    id         String  @id @default(uuid()) @db.Uuid
    labelledId String  @db.Uuid
    labelId    String  @db.Uuid
    labelled   project @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "project_labels_labelledid_labelid_unique")
}

model pull_request {
    id                      String                      @id @default(uuid()) @db.Uuid
    created_at              DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                    @default(now()) @db.Timestamptz(6)
    status                  PullRequestStatus           @default(Open)
    hasBeenClosedOrRejected Boolean                     @default(false)
    mergedOrRejectedAt      DateTime?                   @db.Timestamptz(6)
    createdById             String?                     @db.Uuid
    toApiId                 String?                     @db.Uuid
    toCodeId                String?                     @db.Uuid
    toNoteId                String?                     @db.Uuid
    toProjectId             String?                     @db.Uuid
    toRoutineId             String?                     @db.Uuid
    toStandardId            String?                     @db.Uuid
    createdBy               user?                       @relation("pull_request_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    toApi                   api?                        @relation(fields: [toApiId], references: [id], onDelete: Cascade)
    fromApiVersion          api_version?                @relation("pull_request_from_api_version")
    toCode                  code?                       @relation(fields: [toCodeId], references: [id], onDelete: Cascade)
    fromCodeVersion         code_version?               @relation("pull_request_from_code_version")
    toNote                  note?                       @relation(fields: [toNoteId], references: [id], onDelete: Cascade)
    fromNoteVersion         note_version?               @relation("pull_request_from_note_version")
    toProject               project?                    @relation(fields: [toProjectId], references: [id], onDelete: Cascade)
    fromProjectVersion      project_version?            @relation("pull_request_from_project_version")
    toRoutine               routine?                    @relation(fields: [toRoutineId], references: [id], onDelete: Cascade)
    fromRoutineVersion      routine_version?            @relation("pull_request_from_routine_version")
    toStandard              standard?                   @relation(fields: [toStandardId], references: [id], onDelete: Cascade)
    fromStandardVersion     standard_version?           @relation("pull_request_from_standard_version")
    comments                comment[]
    subscriptions           notification_subscription[]
    translations            pull_request_translation[]
}

model pull_request_translation {
    id            String       @id @default(uuid()) @db.Uuid
    text          String       @db.VarChar(32768)
    language      String       @db.VarChar(3)
    pullRequestId String       @db.Uuid
    pullRequest   pull_request @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)

    @@unique([pullRequestId, language])
}

model question {
    id                String                      @id @default(uuid()) @db.Uuid
    created_at        DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at        DateTime                    @default(now()) @db.Timestamptz(6)
    referencing       String?                     @db.VarChar(2048) // Describes what part of object the question is about, in JSON
    hasAcceptedAnswer Boolean                     @default(false)
    isPrivate         Boolean                     @default(false)
    score             Int                         @default(0)
    bookmarks         Int                         @default(0)
    views             Int                         @default(0)
    apiId             String?                     @db.Uuid
    codeId            String?                     @db.Uuid
    noteId            String?                     @db.Uuid
    projectId         String?                     @db.Uuid
    routineId         String?                     @db.Uuid
    standardId        String?                     @db.Uuid
    teamId            String?                     @db.Uuid
    createdById       String?                     @db.Uuid
    api               api?                        @relation(fields: [apiId], references: [id], onDelete: Cascade)
    code              code?                       @relation(fields: [codeId], references: [id], onDelete: Cascade)
    note              note?                       @relation(fields: [noteId], references: [id], onDelete: Cascade)
    project           project?                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine           routine?                    @relation(fields: [routineId], references: [id], onDelete: Cascade)
    standard          standard?                   @relation(fields: [standardId], references: [id], onDelete: Cascade)
    team              team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    createdBy         user?                       @relation("question_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    comments          comment[]
    answers           question_answer[]
    reports           report[]
    tags              question_tags[]
    bookmarkedBy      bookmark[]                  @relation("bookmark_question")
    reactions         reaction[]                  @relation("reaction_question")
    reactionSummaries reaction_summary[]          @relation("reaction_summary_question")
    viewedBy          view[]                      @relation("view_question")
    translations      question_translation[]
    subscriptions     notification_subscription[]
}

model question_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(16384)
    name                 String                      @db.VarChar(128)
    language             String                      @db.VarChar(3)
    questionId           String                      @db.Uuid
    question             question                    @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([questionId, language])
}

model question_tags {
    id       String   @id @default(uuid()) @db.Uuid
    taggedId String   @db.Uuid
    tagTag   String   @db.VarChar(128)
    tag      tag      @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   question @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "question_tags_taggedid_tagTag_unique")
}

model question_answer {
    id                String                        @id @default(uuid()) @db.Uuid
    created_at        DateTime                      @default(now()) @db.Timestamptz(6)
    updated_at        DateTime                      @default(now()) @db.Timestamptz(6)
    score             Int                           @default(0)
    bookmarks         Int                           @default(0)
    isAccepted        Boolean                       @default(false)
    questionId        String                        @db.Uuid
    createdById       String?                       @db.Uuid
    question          question                      @relation(fields: [questionId], references: [id], onDelete: Cascade)
    createdBy         user?                         @relation("question_answer_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    comments          comment[]
    bookmarkedBy      bookmark[]                    @relation("bookmark_question_answer")
    reactions         reaction[]                    @relation("reaction_question_answer")
    reactionSummaries reaction_summary[]            @relation("reaction_summary_question_answer")
    translations      question_answer_translation[]
}

model question_answer_translation {
    id       String          @id @default(uuid()) @db.Uuid
    text     String          @db.VarChar(32768)
    language String          @db.VarChar(3)
    answerId String          @db.Uuid
    answer   question_answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

    @@unique([answerId, language])
}

model quiz {
    id                     String                      @id @default(uuid()) @db.Uuid
    created_at             DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at             DateTime                    @default(now()) @db.Timestamptz(6)
    isPrivate              Boolean                     @default(false)
    maxAttempts            Int?
    randomizeQuestionOrder Boolean                     @default(false)
    revealCorrectAnswers   Boolean                     @default(true)
    timeLimit              Int?
    wasAutoGenerated       Boolean                     @default(false)
    pointsToPass           Int?
    score                  Int                         @default(0)
    bookmarks              Int                         @default(0)
    routineId              String?                     @db.Uuid
    projectId              String?                     @db.Uuid
    createdById            String?                     @db.Uuid
    routine                routine?                    @relation(fields: [routineId], references: [id], onDelete: Cascade)
    project                project?                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdBy              user?                       @relation(fields: [createdById], references: [id], onDelete: SetNull)
    quizQuestions          quiz_question[]
    bookmarkedBy           bookmark[]                  @relation("bookmark_quiz")
    reactions              reaction[]                  @relation("reaction_quiz")
    reactionSummaries      reaction_summary[]          @relation("reaction_summary_quiz")
    translations           quiz_translation[]
    stats                  stats_quiz[]
    attempts               quiz_attempt[]
    subscriptions          notification_subscription[]
}

model quiz_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(2048)
    name                 String                      @db.VarChar(128)
    language             String                      @db.VarChar(3)
    quizId               String                      @db.Uuid
    quiz                 quiz                        @relation(fields: [quizId], references: [id], onDelete: Cascade)

    @@unique([quizId, language])
}

model quiz_attempt {
    id              String                   @id @default(uuid()) @db.Uuid
    created_at      DateTime                 @default(now()) @db.Timestamptz(6)
    updated_at      DateTime                 @default(now()) @db.Timestamptz(6)
    pointsEarned    Int                      @default(0)
    language        String                   @db.VarChar(3)
    status          QuizAttemptStatus        @default(NotStarted)
    contextSwitches Int                      @default(0)
    timeTaken       Int?
    quizId          String                   @db.Uuid
    userId          String?                  @db.Uuid
    quiz            quiz                     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    user            user?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
    responses       quiz_question_response[]
}

model quiz_question_response {
    id             String        @id @default(uuid()) @db.Uuid
    created_at     DateTime      @default(now()) @db.Timestamptz(6)
    updated_at     DateTime      @default(now()) @db.Timestamptz(6)
    response       String        @db.VarChar(8192)
    quizAttemptId  String        @db.Uuid
    quizQuestionId String        @db.Uuid
    quizAttempt    quiz_attempt  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    quizQuestion   quiz_question @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)

    @@unique([quizAttemptId, quizQuestionId])
}

model quiz_question {
    id                String                      @id @default(uuid()) @db.Uuid
    created_at        DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at        DateTime                    @default(now()) @db.Timestamptz(6)
    order             Int?
    points            Int                         @default(1)
    standardVersionId String?                     @db.Uuid
    quizId            String                      @db.Uuid
    standardVersion   standard_version?           @relation(fields: [standardVersionId], references: [id], onDelete: Cascade)
    quiz              quiz                        @relation(fields: [quizId], references: [id], onDelete: Cascade)
    responses         quiz_question_response[]
    translations      quiz_question_translation[]
}

model quiz_question_translation {
    id           String        @id @default(uuid()) @db.Uuid
    helpText     String?       @db.VarChar(2048)
    questionText String        @db.VarChar(1024)
    language     String        @db.VarChar(3)
    questionId   String        @db.Uuid
    question     quiz_question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([questionId, language])
}

model reaction {
    id               String           @id @default(uuid()) @db.Uuid
    created_at       DateTime         @default(now()) @db.Timestamptz(6)
    updated_at       DateTime         @default(now()) @db.Timestamptz(6)
    emoji            String           @db.VarChar(32)
    byId             String           @db.Uuid
    apiId            String?          @db.Uuid
    chatMessageId    String?          @db.Uuid
    codeId           String?          @db.Uuid
    commentId        String?          @db.Uuid
    issueId          String?          @db.Uuid
    noteId           String?          @db.Uuid
    postId           String?          @db.Uuid
    projectId        String?          @db.Uuid
    questionId       String?          @db.Uuid
    questionAnswerId String?          @db.Uuid
    quizId           String?          @db.Uuid
    routineId        String?          @db.Uuid
    standardId       String?          @db.Uuid
    by               user             @relation("reaction_by", fields: [byId], references: [id], onDelete: Cascade)
    api              api?             @relation("reaction_api", fields: [apiId], references: [id], onDelete: Cascade)
    chatMessage      chat_message?    @relation("reaction_chat_message", fields: [chatMessageId], references: [id], onDelete: Cascade)
    code             code?            @relation("reaction_code", fields: [codeId], references: [id], onDelete: Cascade)
    comment          comment?         @relation("reaction_comment", fields: [commentId], references: [id], onDelete: Cascade)
    issue            issue?           @relation("reaction_issue", fields: [issueId], references: [id], onDelete: Cascade)
    note             note?            @relation("reaction_note", fields: [noteId], references: [id], onDelete: Cascade)
    post             post?            @relation("reaction_post", fields: [postId], references: [id], onDelete: Cascade)
    project          project?         @relation("reaction_project", fields: [projectId], references: [id], onDelete: Cascade)
    question         question?        @relation("reaction_question", fields: [questionId], references: [id], onDelete: Cascade)
    questionAnswer   question_answer? @relation("reaction_question_answer", fields: [questionAnswerId], references: [id], onDelete: Cascade)
    quiz             quiz?            @relation("reaction_quiz", fields: [quizId], references: [id], onDelete: Cascade)
    routine          routine?         @relation("reaction_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard         standard?        @relation("reaction_standard", fields: [standardId], references: [id], onDelete: Cascade)
}

model reaction_summary {
    id               String           @id @default(uuid()) @db.Uuid
    created_at       DateTime         @default(now()) @db.Timestamptz(6)
    updated_at       DateTime         @default(now()) @db.Timestamptz(6)
    emoji            String           @db.VarChar(32)
    count            Int              @default(0)
    apiId            String?          @db.Uuid
    chatMessageId    String?          @db.Uuid
    codeId           String?          @db.Uuid
    commentId        String?          @db.Uuid
    issueId          String?          @db.Uuid
    noteId           String?          @db.Uuid
    postId           String?          @db.Uuid
    projectId        String?          @db.Uuid
    questionId       String?          @db.Uuid
    questionAnswerId String?          @db.Uuid
    quizId           String?          @db.Uuid
    routineId        String?          @db.Uuid
    standardId       String?          @db.Uuid
    api              api?             @relation("reaction_summary_api", fields: [apiId], references: [id], onDelete: Cascade)
    chatMessage      chat_message?    @relation("reaction_summary_chat_message", fields: [chatMessageId], references: [id], onDelete: Cascade)
    code             code?            @relation("reaction_summary_code", fields: [codeId], references: [id], onDelete: Cascade)
    comment          comment?         @relation("reaction_summary_comment", fields: [commentId], references: [id], onDelete: Cascade)
    issue            issue?           @relation("reaction_summary_issue", fields: [issueId], references: [id], onDelete: Cascade)
    note             note?            @relation("reaction_summary_note", fields: [noteId], references: [id], onDelete: Cascade)
    post             post?            @relation("reaction_summary_post", fields: [postId], references: [id], onDelete: Cascade)
    project          project?         @relation("reaction_summary_project", fields: [projectId], references: [id], onDelete: Cascade)
    question         question?        @relation("reaction_summary_question", fields: [questionId], references: [id], onDelete: Cascade)
    questionAnswer   question_answer? @relation("reaction_summary_question_answer", fields: [questionAnswerId], references: [id], onDelete: Cascade)
    quiz             quiz?            @relation("reaction_summary_quiz", fields: [quizId], references: [id], onDelete: Cascade)
    routine          routine?         @relation("reaction_summary_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard         standard?        @relation("reaction_summary_standard", fields: [standardId], references: [id], onDelete: Cascade)

    @@unique([emoji, apiId, chatMessageId, codeId, commentId, issueId, noteId, postId, projectId, questionId, questionAnswerId, quizId, routineId, standardId], name: "reaction_summary_emoji_unique")
}

model reminder_list {
    id         String      @id @default(uuid()) @db.Uuid
    created_at DateTime    @default(now()) @db.Timestamptz(6)
    updated_at DateTime    @default(now()) @db.Timestamptz(6)
    focusMode  focus_mode?
    reminders  reminder[]
}

model reminder {
    id                   String                      @id @default(uuid()) @db.Uuid
    created_at           DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    name                 String                      @db.VarChar(128)
    description          String?                     @db.VarChar(2048)
    dueDate              DateTime?                   @db.Timestamptz(6)
    index                Int
    isComplete           Boolean                     @default(false)
    reminderListId       String                      @db.Uuid
    reminderItems        reminder_item[]
    reminderList         reminder_list               @relation(fields: [reminderListId], references: [id], onDelete: Cascade)
}

model reminder_item {
    id          String    @id @default(uuid()) @db.Uuid
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    updated_at  DateTime  @default(now()) @db.Timestamptz(6)
    name        String    @db.VarChar(128)
    description String?   @db.VarChar(2048)
    dueDate     DateTime? @db.Timestamptz(6)
    index       Int
    isComplete  Boolean   @default(false)
    reminderId  String    @db.Uuid
    reminder    reminder  @relation(fields: [reminderId], references: [id], onDelete: Cascade)
}

model report {
    id                String                      @id @default(uuid()) @db.Uuid
    created_at        DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at        DateTime                    @default(now()) @db.Timestamptz(6)
    reason            String                      @db.VarChar(128)
    details           String?                     @db.VarChar(8192)
    language          String                      @db.VarChar(3)
    status            ReportStatus
    apiVersionId      String?                     @db.Uuid
    chatMessageId     String?                     @db.Uuid
    codeVersionId     String?                     @db.Uuid
    commentId         String?                     @db.Uuid
    issueId           String?                     @db.Uuid
    noteVersionId     String?                     @db.Uuid
    postId            String?                     @db.Uuid
    projectVersionId  String?                     @db.Uuid
    questionId        String?                     @db.Uuid
    routineVersionId  String?                     @db.Uuid
    standardVersionId String?                     @db.Uuid
    tagId             String?                     @db.Uuid
    teamId            String?                     @db.Uuid
    userId            String?                     @db.Uuid
    createdById       String?                     @db.Uuid
    apiVersion        api_version?                @relation(fields: [apiVersionId], references: [id], onDelete: Cascade)
    chatMessage       chat_message?               @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
    codeVersion       code_version?               @relation(fields: [codeVersionId], references: [id], onDelete: Cascade)
    comment           comment?                    @relation(fields: [commentId], references: [id], onDelete: Cascade)
    issue             issue?                      @relation(fields: [issueId], references: [id], onDelete: Cascade)
    noteVersion       note_version?               @relation(fields: [noteVersionId], references: [id], onDelete: Cascade)
    post              post?                       @relation(fields: [postId], references: [id], onDelete: Cascade)
    projectVersion    project_version?            @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)
    question          question?                   @relation(fields: [questionId], references: [id], onDelete: Cascade)
    routineVersion    routine_version?            @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    standardVersion   standard_version?           @relation(fields: [standardVersionId], references: [id], onDelete: Cascade)
    tag               tag?                        @relation(fields: [tagId], references: [id], onDelete: Cascade)
    team              team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user              user?                       @relation("report_user", fields: [userId], references: [id], onDelete: Cascade)
    createdBy         user?                       @relation("report_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    responses         report_response[]
    subscriptions     notification_subscription[]
}

model report_response {
    id              String                @id @default(uuid()) @db.Uuid
    created_at      DateTime              @default(now()) @db.Timestamptz(6)
    updated_at      DateTime              @default(now()) @db.Timestamptz(6)
    reportId        String                @db.Uuid
    createdById     String                @db.Uuid
    actionSuggested ReportSuggestedAction
    details         String?               @db.VarChar(8192)
    language        String?               @db.VarChar(3)
    report          report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
    createdBy       user                  @relation("report_response_createdBy", fields: [createdById], references: [id], onDelete: Cascade)

    @@unique([reportId, createdById], name: "report_response_reportid_userid_unique")
}

model reputation_history {
    id         String   @id @default(uuid()) @db.Uuid
    created_at DateTime @default(now()) @db.Timestamptz(6)
    updated_at DateTime @default(now()) @db.Timestamptz(6)
    amount     Int
    event      String   @db.VarChar(128)
    objectId1  String?  @db.Uuid
    objectId2  String?  @db.Uuid
    userId     String   @db.Uuid
    user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model resource {
    id           String                 @id @default(uuid()) @db.Uuid
    created_at   DateTime               @default(now()) @db.Timestamptz(6)
    updated_at   DateTime               @default(now()) @db.Timestamptz(6)
    index        Int?                   @default(0)
    link         String                 @db.VarChar(1024)
    usedFor      ResourceUsedFor        @default(Context)
    listId       String                 @db.Uuid
    list         resource_list          @relation(fields: [listId], references: [id], onDelete: Cascade)
    translations resource_translation[]
}

model resource_translation {
    id          String   @id @default(uuid()) @db.Uuid
    description String?  @db.VarChar(2048)
    name        String?  @db.VarChar(128)
    language    String   @db.VarChar(3)
    resourceId  String   @db.Uuid
    resource    resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

    @@unique([resourceId, language])
}

model resource_list {
    id              String                      @id @default(uuid()) @db.Uuid
    created_at      DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at      DateTime                    @default(now()) @db.Timestamptz(6)
    apiVersion      api_version?                @relation("resource_list_api_version")
    codeVersion     code_version?               @relation("resource_list_code_version")
    post            post?                       @relation("resource_list_post")
    projectVersion  project_version?            @relation("resource_list_project_version")
    routineVersion  routine_version?            @relation("resource_list_routine_version")
    standardVersion standard_version?           @relation("resource_list_standard_version")
    focusMode       focus_mode?                 @relation("resource_list_focus_mode")
    resources       resource[]
    team            team?                       @relation("resource_list_team")
    translations    resource_list_translation[]
}

model resource_list_translation {
    id          String        @id @default(uuid()) @db.Uuid
    description String?       @db.VarChar(2048)
    name        String?       @db.VarChar(128)
    language    String        @db.VarChar(3)
    listId      String        @db.Uuid
    list        resource_list @relation(fields: [listId], references: [id], onDelete: Cascade)

    @@unique([listId, language])
}

model role {
    id           String             @id @default(uuid()) @db.Uuid
    created_at   DateTime           @default(now()) @db.Timestamptz(6)
    updated_at   DateTime           @default(now()) @db.Timestamptz(6)
    name         String             @db.VarChar(128)
    permissions  String             @db.VarChar(4096)
    teamId       String             @db.Uuid
    team         team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
    members      member[]
    meetings     meeting_roles[]
    chats        chat_roles[]
    translations role_translation[]

    @@unique([teamId, name], name: "role_teamId_name_unique")
}

model role_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    name        String  @db.VarChar(128)
    language    String  @db.VarChar(3)
    roleId      String  @db.Uuid
    role        role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([roleId, language])
}

model routine {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    hasBeenTransferred Boolean                     @default(false)
    hasCompleteVersion Boolean                     @default(false)
    completedAt        DateTime?                   @db.Timestamptz(6)
    isDeleted          Boolean                     @default(false)
    isInternal         Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    score              Int                         @default(0)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    permissions        String                      @db.VarChar(4096)
    createdById        String?                     @db.Uuid
    parentId           String?                     @db.Uuid
    ownedByTeamId      String?                     @db.Uuid
    ownedByUserId      String?                     @db.Uuid
    createdBy          user?                       @relation("routine_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    issues             issue[]
    parent             routine_version?            @relation("routine_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    quizzes            quiz[]
    ownedByTeam        team?                       @relation("routine_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: SetNull)
    ownedByUser        user?                       @relation("routine_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: SetNull)
    labels             routine_labels[]
    tags               routine_tags[]
    bookmarkedBy       bookmark[]                  @relation("bookmark_routine")
    versions           routine_version[]
    viewedBy           view[]                      @relation("view_routine")
    reactions          reaction[]                  @relation("reaction_routine")
    reactionSummaries  reaction_summary[]          @relation("reaction_summary_routine")
    pullRequests       pull_request[]
    stats              stats_routine[]
    questions          question[]
    transfers          transfer[]                  @relation("transfer_routine")
    subscriptions      notification_subscription[]
}

model routine_version {
    id                                String                        @id @default(uuid()) @db.Uuid
    created_at                        DateTime                      @default(now()) @db.Timestamptz(6)
    updated_at                        DateTime                      @default(now()) @db.Timestamptz(6)
    completedAt                       DateTime?                     @db.Timestamptz(6)
    configCallData                    String?                       @db.VarChar(8192)
    configFormInput                   String?                       @db.VarChar(8192)
    configFormOutput                  String?                       @db.VarChar(8192)
    complexity                        Int                           @default(1)
    intendToPullRequest               Boolean                       @default(false)
    isAutomatable                     Boolean                       @default(false)
    isComplete                        Boolean                       @default(true)
    isDeleted                         Boolean                       @default(false)
    isLatest                          Boolean                       @default(false)
    isLatestPublic                    Boolean                       @default(false)
    isPrivate                         Boolean                       @default(false)
    rootId                            String                        @db.Uuid
    routineType                       RoutineType                   @default(Informational)
    simplicity                        Int                           @default(1)
    timesStarted                      Int                           @default(0)
    timesCompleted                    Int                           @default(0)
    resourceListId                    String?                       @unique @db.Uuid
    apiVersionId                      String?                       @db.Uuid
    codeVersionId                     String?                       @db.Uuid
    pullRequestId                     String?                       @unique @db.Uuid
    versionIndex                      Int                           @default(0)
    versionLabel                      String                        @default("1.0.0") @db.VarChar(16)
    versionNotes                      String?                       @db.VarChar(4096)
    apiVersion                        api_version?                  @relation(fields: [apiVersionId], references: [id], onDelete: SetNull)
    codeVersion                       code_version?                 @relation(fields: [codeVersionId], references: [id], onDelete: SetNull)
    comments                          comment[]
    reports                           report[]
    nodes                             node[]
    nodeLinks                         node_link[]
    nodeLists                         node_routine_list_item[]
    resourceList                      resource_list?                @relation("resource_list_routine_version", fields: [resourceListId], references: [id], onDelete: SetNull)
    root                              routine                       @relation(fields: [rootId], references: [id], onDelete: Cascade)
    forks                             routine[]                     @relation("routine_version_fork")
    inputs                            routine_version_input[]
    outputs                           routine_version_output[]
    pullRequest                       pull_request?                 @relation("pull_request_from_routine_version", fields: [pullRequestId], references: [id], onDelete: SetNull)
    translations                      routine_version_translation[]
    runRoutines                       run_routine[]                 @relation("run_routine_version")
    runSteps                          run_routine_step[]            @relation("run_routine_step_subroutine")
    suggestedNextByNode               node_end_next[]               @relation("node_end_next_to")
    suggestedNextByRoutineVersion     routine_version_end_next[]    @relation("routine_version_end_next_to")
    suggestedNextByRoutineVersionFrom routine_version_end_next[]    @relation("routine_version_end_next_from")
    directoryListings                 project_version_directory[]

    @@unique([rootId, versionIndex], name: "routine_version_rootId_versionIndex_unique")
}

model routine_version_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(2048)
    instructions         String?                     @db.VarChar(8192)
    name                 String                      @db.VarChar(128)
    language             String                      @db.VarChar(3)
    routineVersionId     String                      @db.Uuid
    routineVersion       routine_version             @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)

    @@unique([routineVersionId, language])
}

model routine_version_input {
    id                String                              @id @default(uuid()) @db.Uuid
    index             Int?                                @default(0)
    isRequired        Boolean                             @default(true)
    name              String?                             @db.VarChar(128)
    routineVersionId  String                              @db.Uuid
    standardVersionId String?                             @db.Uuid
    routineVersion    routine_version                     @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    standardVersion   standard_version?                   @relation(fields: [standardVersionId], references: [id], onDelete: SetNull)
    translations      routine_version_input_translation[]
    runInputs         run_routine_input[]
}

model routine_version_input_translation {
    id                    String                @id @default(uuid()) @db.Uuid
    description           String?               @db.VarChar(2048)
    helpText              String?               @db.VarChar(2048)
    routineVersionInputId String                @db.Uuid
    language              String                @db.VarChar(3)
    routineVersionInput   routine_version_input @relation(fields: [routineVersionInputId], references: [id], onDelete: Cascade)

    @@unique([routineVersionInputId, language])
}

model routine_version_output {
    id                String                                @id @default(uuid()) @db.Uuid
    index             Int?                                  @default(0)
    name              String?                               @db.VarChar(128)
    routineVersionId  String                                @db.Uuid
    standardVersionId String?                               @db.Uuid
    routineVersion    routine_version                       @relation(fields: [routineVersionId], references: [id], onDelete: Cascade)
    standardVersion   standard_version?                     @relation(fields: [standardVersionId], references: [id], onDelete: SetNull)
    translations      routine_verstion_output_translation[]
    runOutputs        run_routine_output[]
}

model routine_verstion_output_translation {
    id                   String                 @id @default(uuid()) @db.Uuid
    description          String?                @db.VarChar(2048)
    helpText             String?                @db.VarChar(2048)
    routineOutputId      String                 @db.Uuid
    language             String                 @db.VarChar(3)
    routineVersionOutput routine_version_output @relation(fields: [routineOutputId], references: [id], onDelete: Cascade)

    @@unique([routineOutputId, language])
}

model routine_version_end_next {
    id                   String          @id @default(uuid()) @db.Uuid
    fromRoutineVersionId String          @db.Uuid
    toRoutineVersionId   String          @db.Uuid
    fromRoutineVersion   routine_version @relation("routine_version_end_next_from", fields: [fromRoutineVersionId], references: [id], onDelete: Cascade)
    toRoutineVersion     routine_version @relation("routine_version_end_next_to", fields: [toRoutineVersionId], references: [id], onDelete: Cascade)

    @@unique([fromRoutineVersionId, toRoutineVersionId])
}

model routine_tags {
    id       String  @id @default(uuid()) @db.Uuid
    taggedId String  @db.Uuid
    tagTag   String  @db.VarChar(128)
    tag      tag     @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   routine @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "routine_tags_taggedid_tagTag_unique")
}

model routine_labels {
    id         String  @id @default(uuid()) @db.Uuid
    labelledId String  @db.Uuid
    labelId    String  @db.Uuid
    labelled   routine @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "routine_labels_labelledid_labelid_unique")
}

model run_project {
    id                   String                      @id @default(uuid()) @db.Uuid
    created_at           DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    completedComplexity  Int                         @default(0)
    contextSwitches      Int                         @default(0)
    isPrivate            Boolean                     @default(false)
    scheduleId           String?                     @db.Uuid
    startedAt            DateTime?                   @db.Timestamptz(6)
    timeElapsed          Int?
    completedAt          DateTime?                   @db.Timestamptz(6)
    name                 String                      @db.VarChar(128)
    status               RunStatus                   @default(Scheduled)
    projectVersionId     String?                     @db.Uuid
    teamId               String?                     @db.Uuid
    userId               String?                     @db.Uuid
    projectVersion       project_version?            @relation("run_project_version", fields: [projectVersionId], references: [id])
    schedule             schedule?                   @relation("run_project_schedule", fields: [scheduleId], references: [id], onDelete: SetNull)
    team                 team?                       @relation("run_project_team", fields: [teamId], references: [id], onDelete: Cascade)
    user                 user?                       @relation("run_project_user", fields: [userId], references: [id], onDelete: Cascade)
    steps                run_project_step[]          @relation("run_project_step_run")
    runRoutines          run_routine[]               @relation("run_routine_run_project")
}

model run_project_step {
    id              String                     @id @default(uuid()) @db.Uuid
    order           Int
    contextSwitches Int                        @default(0)
    runProjectId    String                     @db.Uuid
    directoryId     String?                    @db.Uuid
    startedAt       DateTime?                  @db.Timestamptz(6)
    timeElapsed     Int?
    completedAt     DateTime?                  @db.Timestamptz(6)
    step            Int[]
    status          RunStepStatus              @default(InProgress)
    name            String                     @db.VarChar(128)
    directory       project_version_directory? @relation("run_project_step_directory", fields: [directoryId], references: [id], onDelete: SetNull)
    runProject      run_project                @relation("run_project_step_run", fields: [runProjectId], references: [id], onDelete: Cascade)
}

model run_routine {
    id                   String                      @id @default(uuid()) @db.Uuid
    created_at           DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    completedComplexity  Int                         @default(0)
    contextSwitches      Int                         @default(0)
    isPrivate            Boolean                     @default(false)
    scheduleId           String?                     @db.Uuid
    wasRunAutomatically  Boolean                     @default(false)
    startedAt            DateTime?                   @db.Timestamptz(6)
    timeElapsed          Int?
    completedAt          DateTime?                   @db.Timestamptz(6)
    name                 String                      @db.VarChar(128)
    status               RunStatus                   @default(Scheduled)
    routineVersionId     String?                     @db.Uuid
    teamId               String?                     @db.Uuid
    userId               String?                     @db.Uuid
    runProjectId         String?                     @db.Uuid
    routineVersion       routine_version?            @relation("run_routine_version", fields: [routineVersionId], references: [id])
    schedule             schedule?                   @relation("run_routine_schedule", fields: [scheduleId], references: [id], onDelete: SetNull)
    runProject           run_project?                @relation("run_routine_run_project", fields: [runProjectId], references: [id], onDelete: SetNull)
    team                 team?                       @relation("run_routine_team", fields: [teamId], references: [id], onDelete: SetNull)
    user                 user?                       @relation("run_routine_user", fields: [userId], references: [id], onDelete: Cascade)
    steps                run_routine_step[]          @relation("run_routine_step_run")
    inputs               run_routine_input[]         @relation("run_routine_input_run")
    outputs              run_routine_output[]        @relation("run_routine_output_run")
}

model run_routine_input {
    id           String                @id @default(uuid()) @db.Uuid
    created_at   DateTime              @default(now()) @db.Timestamptz(6)
    updated_at   DateTime              @default(now()) @db.Timestamptz(6)
    data         String                @db.VarChar(8192)
    inputId      String                @db.Uuid
    runRoutineId String                @db.Uuid
    input        routine_version_input @relation(fields: [inputId], references: [id], onDelete: Cascade)
    runRoutine   run_routine           @relation("run_routine_input_run", fields: [runRoutineId], references: [id], onDelete: Cascade)
}

model run_routine_output {
    id           String                 @id @default(uuid()) @db.Uuid
    created_at   DateTime               @default(now()) @db.Timestamptz(6)
    updated_at   DateTime               @default(now()) @db.Timestamptz(6)
    data         String                 @db.VarChar(8192)
    outputId     String                 @db.Uuid
    runRoutineId String                 @db.Uuid
    output       routine_version_output @relation(fields: [outputId], references: [id], onDelete: Cascade)
    runRoutine   run_routine            @relation("run_routine_output_run", fields: [runRoutineId], references: [id], onDelete: Cascade)
}

model run_routine_step {
    id              String           @id @default(uuid()) @db.Uuid
    order           Int
    contextSwitches Int              @default(0)
    runRoutineId    String           @db.Uuid
    nodeId          String?          @db.Uuid
    subroutineId    String?          @db.Uuid
    startedAt       DateTime?        @db.Timestamptz(6)
    timeElapsed     Int?
    completedAt     DateTime?        @db.Timestamptz(6)
    step            Int[]
    status          RunStepStatus    @default(InProgress)
    name            String           @db.VarChar(128)
    node            node?            @relation("run_routine_step_node", fields: [nodeId], references: [id], onDelete: SetNull)
    runRoutine      run_routine      @relation("run_routine_step_run", fields: [runRoutineId], references: [id], onDelete: Cascade)
    subroutine      routine_version? @relation("run_routine_step_subroutine", fields: [subroutineId], references: [id])
}

model schedule {
    id            String                      @id @default(uuid()) @db.Uuid
    created_at    DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at    DateTime                    @default(now()) @db.Timestamptz(6)
    startTime     DateTime
    endTime       DateTime
    timezone      String
    exceptions    schedule_exception[]
    focusModes    focus_mode[]                @relation("focus_mode_schedule")
    labels        schedule_labels[]
    meetings      meeting[]                   @relation("meeting_schedule")
    recurrences   schedule_recurrence[]
    runProjects   run_project[]               @relation("run_project_schedule")
    runRoutines   run_routine[]               @relation("run_routine_schedule")
    subscriptions notification_subscription[]
}

model schedule_labels {
    id         String   @id @default(uuid()) @db.Uuid
    labelledId String   @db.Uuid
    labelId    String   @db.Uuid
    labelled   schedule @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "schedule_labels_labelledid_labelid_unique")
}

model schedule_exception {
    id                String    @id @default(uuid()) @db.Uuid
    scheduleId        String    @db.Uuid
    schedule          schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
    originalStartTime DateTime
    newStartTime      DateTime?
    newEndTime        DateTime?
}

model schedule_recurrence {
    id             String                 @id @default(uuid()) @db.Uuid
    scheduleId     String                 @db.Uuid
    schedule       schedule               @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
    recurrenceType ScheduleRecurrenceType
    interval       Int                    @default(1)
    dayOfWeek      Int?
    dayOfMonth     Int?
    month          Int?
    endDate        DateTime?
    duration       Int?
}

model standard {
    id                 String                      @id @default(uuid()) @db.Uuid
    created_at         DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                    @default(now()) @db.Timestamptz(6)
    hasBeenTransferred Boolean                     @default(false)
    hasCompleteVersion Boolean                     @default(false)
    completedAt        DateTime?                   @db.Timestamptz(6)
    score              Int                         @default(0)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    permissions        String                      @db.VarChar(4096)
    isDeleted          Boolean                     @default(false)
    isInternal         Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    parentId           String?                     @db.Uuid
    createdById        String?                     @db.Uuid
    ownedByTeamId      String?                     @db.Uuid
    ownedByUserId      String?                     @db.Uuid
    createdBy          user?                       @relation("standard_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    ownedByTeam        team?                       @relation("standard_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: SetNull)
    ownedByUser        user?                       @relation("standard_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: SetNull)
    issues             issue[]
    labels             standard_labels[]
    parent             standard_version?           @relation("standard_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    tags               standard_tags[]
    bookmarkedBy       bookmark[]                  @relation("bookmark_standard")
    versions           standard_version[]
    viewedBy           view[]                      @relation("view_standard")
    reactions          reaction[]                  @relation("reaction_standard")
    reactionSummaries  reaction_summary[]          @relation("reaction_summary_standard")
    pullRequests       pull_request[]
    stats              stats_standard[]
    questions          question[]
    transfers          transfer[]                  @relation("transfer_standard")
    subscriptions      notification_subscription[]
}

model standard_version {
    id                    String                         @id @default(uuid()) @db.Uuid
    created_at            DateTime                       @default(now()) @db.Timestamptz(6)
    updated_at            DateTime                       @default(now()) @db.Timestamptz(6)
    completedAt           DateTime?                      @db.Timestamptz(6)
    codeLanguage          String                         @default("json") @db.VarChar(128)
    default               String?                        @db.VarChar(2048)
    variant               StandardType                   @default(DataStructure)
    props                 String                         @db.VarChar(8192)
    isLatest              Boolean                        @default(false)
    isLatestPublic        Boolean                        @default(false)
    resourceListId        String?                        @unique @db.Uuid
    rootId                String                         @db.Uuid
    yup                   String?                        @db.VarChar(8192)
    versionIndex          Int                            @default(0)
    versionLabel          String                         @default("1.0.0") @db.VarChar(16)
    versionNotes          String?                        @db.VarChar(4096)
    intendToPullRequest   Boolean                        @default(false)
    pullRequestId         String?                        @unique @db.Uuid
    isComplete            Boolean                        @default(false)
    isDeleted             Boolean                        @default(false)
    isPrivate             Boolean                        @default(false)
    isFile                Boolean                        @default(false)
    comments              comment[]
    directoryListings     project_version_directory[]
    forks                 standard[]                     @relation("standard_version_fork")
    pullRequest           pull_request?                  @relation("pull_request_from_standard_version", fields: [pullRequestId], references: [id], onDelete: SetNull)
    quizQuestions         quiz_question[]
    reports               report[]
    resourceList          resource_list?                 @relation("resource_list_standard_version", fields: [resourceListId], references: [id], onDelete: SetNull)
    root                  standard                       @relation(fields: [rootId], references: [id], onDelete: Cascade)
    routineVersionInputs  routine_version_input[]
    routineVersionOutputs routine_version_output[]
    translations          standard_version_translation[]

    @@unique([rootId, versionIndex], name: "standard_version_rootId_versionIndex_unique")
}

model standard_version_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    name                 String                      @db.VarChar(128)
    description          String?                     @db.VarChar(2048)
    jsonVariable         String?                     @db.VarChar(8192)
    standardVersionId    String                      @db.Uuid
    language             String                      @db.VarChar(3)
    standardVersion      standard_version            @relation(fields: [standardVersionId], references: [id], onDelete: Cascade)

    @@unique([standardVersionId, language])
}

model standard_tags {
    id       String   @id @default(uuid()) @db.Uuid
    taggedId String   @db.Uuid
    tagTag   String   @db.VarChar(128)
    tag      tag      @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   standard @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "standard_tags_taggedid_tagTag_unique")
}

model standard_labels {
    id         String   @id @default(uuid()) @db.Uuid
    labelledId String   @db.Uuid
    labelId    String   @db.Uuid
    labelled   standard @relation(fields: [labelledId], references: [id], onDelete: Cascade)
    label      label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([labelledId, labelId], name: "standard_labels_labelledid_labelid_unique")
}

model stats_site {
    id                               String     @id @default(uuid()) @db.Uuid
    periodStart                      DateTime   @db.Timestamptz(6)
    periodEnd                        DateTime   @db.Timestamptz(6)
    periodType                       PeriodType
    activeUsers                      Int
    apiCalls                         Int
    apisCreated                      Int
    codesCreated                     Int
    codesCompleted                   Int
    codeCompletionTimeAverage        Float
    codeCalls                        Int
    projectsCreated                  Int
    projectsCompleted                Int
    projectCompletionTimeAverage     Float
    quizzesCreated                   Int
    quizzesCompleted                 Int
    routinesCreated                  Int
    routinesCompleted                Int
    routineCompletionTimeAverage     Float
    routineSimplicityAverage         Float
    routineComplexityAverage         Float
    runProjectsStarted               Int
    runProjectsCompleted             Int
    runProjectCompletionTimeAverage  Float
    runProjectContextSwitchesAverage Float
    runRoutinesStarted               Int
    runRoutinesCompleted             Int
    runRoutineCompletionTimeAverage  Float
    runRoutineContextSwitchesAverage Float
    standardsCreated                 Int
    standardsCompleted               Int
    standardCompletionTimeAverage    Float
    teamsCreated                     Int
    verifiedEmailsCreated            Int
    verifiedWalletsCreated           Int
}

model stats_api {
    id              String     @id @default(uuid()) @db.Uuid
    apiId           String     @db.Uuid
    periodStart     DateTime   @db.Timestamptz(6)
    periodEnd       DateTime   @db.Timestamptz(6)
    periodType      PeriodType
    calls           Int
    routineVersions Int
    api             api        @relation(fields: [apiId], references: [id], onDelete: Cascade)
}

model stats_code {
    id              String     @id @default(uuid()) @db.Uuid
    codeId          String     @db.Uuid
    periodStart     DateTime   @db.Timestamptz(6)
    periodEnd       DateTime   @db.Timestamptz(6)
    periodType      PeriodType
    calls           Int
    routineVersions Int
    code            code       @relation(fields: [codeId], references: [id], onDelete: Cascade)
}

model stats_project {
    id                        String     @id @default(uuid()) @db.Uuid
    projectId                 String     @db.Uuid
    periodStart               DateTime   @db.Timestamptz(6)
    periodEnd                 DateTime   @db.Timestamptz(6)
    periodType                PeriodType
    directories               Int
    apis                      Int
    codes                     Int
    notes                     Int
    projects                  Int
    routines                  Int
    standards                 Int
    runsStarted               Int
    runsCompleted             Int
    runCompletionTimeAverage  Float
    runContextSwitchesAverage Float
    teams                     Int
    project                   project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model stats_quiz {
    id                    String     @id @default(uuid()) @db.Uuid
    quizId                String     @db.Uuid
    periodStart           DateTime   @db.Timestamptz(6)
    periodEnd             DateTime   @db.Timestamptz(6)
    periodType            PeriodType
    timesStarted          Int
    timesPassed           Int
    timesFailed           Int
    scoreAverage          Float
    completionTimeAverage Float
    quiz                  quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model stats_routine {
    id                        String     @id @default(uuid()) @db.Uuid
    routineId                 String     @db.Uuid
    periodStart               DateTime   @db.Timestamptz(6)
    periodEnd                 DateTime   @db.Timestamptz(6)
    periodType                PeriodType
    runsStarted               Int
    runsCompleted             Int
    runCompletionTimeAverage  Float
    runContextSwitchesAverage Float
    routine                   routine    @relation(fields: [routineId], references: [id], onDelete: Cascade)
}

model stats_standard {
    id             String     @id @default(uuid()) @db.Uuid
    standardId     String     @db.Uuid
    periodStart    DateTime   @db.Timestamptz(6)
    periodEnd      DateTime   @db.Timestamptz(6)
    periodType     PeriodType
    linksToInputs  Int
    linksToOutputs Int
    standard       standard   @relation(fields: [standardId], references: [id], onDelete: Cascade)
}

model stats_team {
    id                               String     @id @default(uuid()) @db.Uuid
    teamId                           String     @db.Uuid
    periodStart                      DateTime   @db.Timestamptz(6)
    periodEnd                        DateTime   @db.Timestamptz(6)
    periodType                       PeriodType
    apis                             Int
    codes                            Int
    members                          Int
    notes                            Int
    projects                         Int
    routines                         Int
    runRoutinesStarted               Int
    runRoutinesCompleted             Int
    runRoutineCompletionTimeAverage  Float
    runRoutineContextSwitchesAverage Float
    standards                        Int
    team                             team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model stats_user {
    id                               String     @id @default(uuid()) @db.Uuid
    userId                           String     @db.Uuid
    periodStart                      DateTime   @db.Timestamptz(6)
    periodEnd                        DateTime   @db.Timestamptz(6)
    periodType                       PeriodType
    apisCreated                      Int
    codesCreated                     Int
    codesCompleted                   Int
    codeCompletionTimeAverage        Float
    projectsCreated                  Int
    projectsCompleted                Int
    projectCompletionTimeAverage     Float
    quizzesPassed                    Int
    quizzesFailed                    Int
    routinesCreated                  Int
    routinesCompleted                Int
    routineCompletionTimeAverage     Float
    runProjectsStarted               Int
    runProjectsCompleted             Int
    runProjectCompletionTimeAverage  Float
    runProjectContextSwitchesAverage Float
    runRoutinesStarted               Int
    runRoutinesCompleted             Int
    runRoutineCompletionTimeAverage  Float
    runRoutineContextSwitchesAverage Float
    standardsCreated                 Int
    standardsCompleted               Int
    standardCompletionTimeAverage    Float
    teamsCreated                     Int
    user                             user       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tag {
    id               String              @id @default(uuid()) @db.Uuid
    created_at       DateTime            @default(now()) @db.Timestamptz(6)
    updated_at       DateTime            @default(now()) @db.Timestamptz(6)
    tag              String              @unique @db.VarChar(128)
    bookmarks        Int                 @default(0)
    createdById      String?             @db.Uuid
    createdBy        user?               @relation("tag_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    apis             api_tags[]
    codes            code_tags[]
    notes            note_tags[]
    posts            post_tags[]
    projects         project_tags[]
    questions        question_tags[]
    reports          report[]
    routines         routine_tags[]
    standards        standard_tags[]
    teams            team_tags[]
    bookmarkedBy     bookmark[]          @relation("bookmark_tag")
    translations     tag_translation[]
    focusModeFilters focus_mode_filter[]
}

model tag_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    description          String?                     @db.VarChar(2048)
    tagId                String                      @db.Uuid
    language             String                      @db.VarChar(3)
    tag                  tag                         @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([tagId, language])
}

model transfer {
    id                    String         @id @default(uuid()) @db.Uuid
    created_at            DateTime       @default(now()) @db.Timestamptz(6)
    updated_at            DateTime       @default(now()) @db.Timestamptz(6)
    status                TransferStatus @default(Pending)
    initializedByReceiver Boolean        @default(false)
    message               String?        @db.VarChar(4096)
    denyReason            String?        @db.VarChar(2048)
    fromTeamId            String?        @db.Uuid
    fromUserId            String?        @db.Uuid
    toTeamId              String?        @db.Uuid
    toUserId              String?        @db.Uuid
    apiId                 String?        @db.Uuid
    codeId                String?        @db.Uuid
    noteId                String?        @db.Uuid
    projectId             String?        @db.Uuid
    routineId             String?        @db.Uuid
    standardId            String?        @db.Uuid
    fromTeam              team?          @relation("transfer_from_team", fields: [fromTeamId], references: [id], onDelete: SetNull)
    fromUser              user?          @relation("transfer_from_user", fields: [fromUserId], references: [id], onDelete: SetNull)
    toTeam                team?          @relation("transfer_to_team", fields: [toTeamId], references: [id], onDelete: Cascade)
    toUser                user?          @relation("transfer_to_user", fields: [toUserId], references: [id], onDelete: Cascade)
    api                   api?           @relation("transfer_api", fields: [apiId], references: [id], onDelete: Cascade)
    code                  code?          @relation("transfer_code", fields: [codeId], references: [id], onDelete: Cascade)
    note                  note?          @relation("transfer_note", fields: [noteId], references: [id], onDelete: Cascade)
    project               project?       @relation("transfer_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine               routine?       @relation("transfer_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard              standard?      @relation("transfer_standard", fields: [standardId], references: [id], onDelete: Cascade)
}

model user {
    id                             String                      @id @default(uuid()) @db.Uuid
    created_at                     DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at                     DateTime                    @default(now()) @db.Timestamptz(6)
    bannerImage                    String?                     @db.VarChar(2048)
    confirmationCode               String?                     @unique @db.VarChar(256)
    confirmationCodeDate           DateTime?                   @db.Timestamptz(6)
    invitedByUserId                String?                     @db.Uuid
    isBot                          Boolean                     @default(false)
    isBotDepictingPerson           Boolean                     @default(false)
    isPrivate                      Boolean                     @default(false)
    isPrivateApis                  Boolean                     @default(false)
    isPrivateApisCreated           Boolean                     @default(false)
    isPrivateCodes                 Boolean                     @default(false)
    isPrivateCodesCreated          Boolean                     @default(false)
    isPrivateNotes                 Boolean                     @default(false)
    isPrivateNotesCreated          Boolean                     @default(false)
    isPrivateMemberships           Boolean                     @default(false)
    isPrivateProjects              Boolean                     @default(false)
    isPrivateProjectsCreated       Boolean                     @default(false)
    isPrivatePullRequests          Boolean                     @default(false)
    isPrivateQuestionsAnswered     Boolean                     @default(false)
    isPrivateQuestionsAsked        Boolean                     @default(false)
    isPrivateQuizzesCreated        Boolean                     @default(false)
    isPrivateRoles                 Boolean                     @default(false)
    isPrivateRoutines              Boolean                     @default(false)
    isPrivateRoutinesCreated       Boolean                     @default(false)
    isPrivateStandards             Boolean                     @default(false)
    isPrivateStandardsCreated      Boolean                     @default(false)
    isPrivateTeamsCreated          Boolean                     @default(false)
    isPrivateBookmarks             Boolean                     @default(false)
    isPrivateVotes                 Boolean                     @default(false)
    lastExport                     DateTime?                   @db.Timestamptz(6)
    lastLoginAttempt               DateTime                    @default(now()) @db.Timestamptz(6)
    lastResetPasswordReqestAttempt DateTime?                   @db.Timestamptz(6)
    logInAttempts                  Int                         @default(0)
    numExports                     Int                         @default(0)
    password                       String?                     @db.VarChar(256)
    resetPasswordCode              String?                     @unique @db.VarChar(256)
    sessionToken                   String?                     @db.VarChar(1024)
    name                           String                      @db.VarChar(128)
    profileImage                   String?                     @db.VarChar(2048)
    theme                          String                      @default("light") @db.VarChar(255)
    handle                         String?                     @unique @db.Citext
    currentStreak                  Int                         @default(0)
    longestStreak                  Int                         @default(0)
    accountTabsOrder               String?                     @db.VarChar(255)
    botSettings                    String?                     @db.VarChar(4096)
    notificationSettings           String?                     @db.VarChar(2048)
    bookmarks                      Int                         @default(0)
    views                          Int                         @default(0)
    reputation                     Int                         @default(0)
    premiumId                      String?                     @unique @db.Uuid
    stripeCustomerId               String?                     @unique @db.VarChar(255)
    status                         AccountStatus               @default(Unlocked)
    apisCreated                    api[]                       @relation("api_createdBy")
    apis                           api[]                       @relation("api_ownedByUser")
    apiKeys                        api_key[]
    awards                         award[]
    chatsCreated                   chat[]
    chats                          chat_participants[]
    chatsInvited                   chat_invite[]
    chatMessages                   chat_message[]              @relation("chat_message_user")
    codesCreated                   code[]                      @relation("code_createdBy")
    codes                          code[]                      @relation("code_ownedByUser")
    comments                       comment[]                   @relation("comment_ownedByUser")
    emails                         email[]
    phones                         phone[]
    posts                          post[]
    invitedByUser                  user?                       @relation("user_invitedByUser", fields: [invitedByUserId], references: [id], onDelete: SetNull)
    invitedUsers                   user[]                      @relation("user_invitedByUser")
    issuesCreated                  issue[]                     @relation("issue_createdBy")
    issuesClosed                   issue[]                     @relation("issue_closedBy")
    labels                         label[]
    languages                      user_language[]
    meetingsAttending              meeting_attendees[]
    meetingsInvited                meeting_invite[]
    paymentHistory                 payment[]
    pushDevices                    push_device[]
    notifications                  notification[]
    notificationSubscriptions      notification_subscription[]
    memberships                    member[]
    membershipsInvited             member_invite[]
    premium                        premium?                    @relation(fields: [premiumId], references: [id], onDelete: SetNull)
    projectsCreated                project[]                   @relation("project_createdBy")
    projects                       project[]                   @relation("project_ownedByUser")
    pullRequests                   pull_request[]              @relation("pull_request_createdBy")
    questionAnswered               question_answer[]           @relation("question_answer_createdBy")
    questionsAsked                 question[]                  @relation("question_createdBy")
    quizzesCreated                 quiz[]
    quizzesTaken                   quiz_attempt[]
    reportsReceived                report[]                    @relation("report_user")
    reportsCreated                 report[]                    @relation("report_createdBy")
    reportResponses                report_response[]           @relation("report_response_createdBy")
    reputationHistory              reputation_history[]
    routinesCreated                routine[]                   @relation("routine_createdBy")
    routines                       routine[]                   @relation("routine_ownedByUser")
    runProjects                    run_project[]               @relation("run_project_user")
    runRoutines                    run_routine[]               @relation("run_routine_user")
    focusModes                     focus_mode[]
    standardsCreated               standard[]                  @relation("standard_createdBy")
    standards                      standard[]                  @relation("standard_ownedByUser")
    bookmakLists                   bookmark_list[]             @relation("bookmark_list_user")
    bookmarkedBy                   bookmark[]                  @relation("bookmark_user")
    tags                           tag[]                       @relation("tag_createdBy")
    teamsCreated                   team[]                      @relation("team_createdBy")
    transfersIncoming              transfer[]                  @relation("transfer_to_user")
    transfersOutgoing              transfer[]                  @relation("transfer_from_user")
    notesCreated                   note[]                      @relation("note_createdBy")
    notes                          note[]                      @relation("note_ownedByUser")
    translations                   user_translation[]
    viewed                         view[]                      @relation("view_by")
    viewedBy                       view[]                      @relation("view_user")
    reacted                        reaction[]                  @relation("reaction_by")
    wallets                        wallet[]
    stats                          stats_user[]
}

model user_translation {
    id                   String                      @id @default(uuid()) @db.Uuid
    updated_at           DateTime                    @default(now()) @db.Timestamptz(6)
    embedding            Unsupported("vector(768)")?
    embeddingNeedsUpdate Boolean                     @default(true)
    bio                  String?                     @db.VarChar(2048)
    userId               String                      @db.Uuid
    language             String                      @db.VarChar(3)
    user                 user                        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language])
}

model user_language {
    id       String @id @default(uuid()) @db.Uuid
    userId   String @db.Uuid
    language String @db.VarChar(3)
    user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language])
}

model view {
    id           String    @id @default(uuid()) @db.Uuid
    lastViewedAt DateTime  @default(now()) @db.Timestamptz(6)
    name         String    @db.VarChar(128)
    byId         String    @db.Uuid
    apiId        String?   @db.Uuid
    codeId       String?   @db.Uuid
    issueId      String?   @db.Uuid
    questionId   String?   @db.Uuid
    noteId       String?   @db.Uuid
    postId       String?   @db.Uuid
    projectId    String?   @db.Uuid
    routineId    String?   @db.Uuid
    standardId   String?   @db.Uuid
    teamId       String?   @db.Uuid
    userId       String?   @db.Uuid
    by           user      @relation("view_by", fields: [byId], references: [id], onDelete: Cascade)
    api          api?      @relation("view_api", fields: [apiId], references: [id], onDelete: Cascade)
    code         code?     @relation("view_code", fields: [codeId], references: [id], onDelete: Cascade)
    issue        issue?    @relation("view_issue", fields: [issueId], references: [id], onDelete: Cascade)
    note         note?     @relation("view_note", fields: [noteId], references: [id], onDelete: Cascade)
    question     question? @relation("view_question", fields: [questionId], references: [id], onDelete: Cascade)
    post         post?     @relation("view_post", fields: [postId], references: [id], onDelete: Cascade)
    project      project?  @relation("view_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine      routine?  @relation("view_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard     standard? @relation("view_standard", fields: [standardId], references: [id], onDelete: Cascade)
    team         team?     @relation("view_team", fields: [teamId], references: [id], onDelete: Cascade)
    user         user?     @relation("view_user", fields: [userId], references: [id], onDelete: Cascade)
}

model wallet {
    id                String    @id @default(uuid()) @db.Uuid
    created_at        DateTime  @default(now()) @db.Timestamptz(6)
    updated_at        DateTime  @default(now()) @db.Timestamptz(6)
    stakingAddress    String    @unique @db.VarChar(128)
    publicAddress     String?   @unique @db.VarChar(128)
    name              String?   @db.VarChar(128)
    nonce             String?   @db.VarChar(8092)
    nonceCreationTime DateTime? @db.Timestamptz(6)
    verified          Boolean   @default(false)
    lastVerifiedTime  DateTime? @db.Timestamptz(6)
    wasReported       Boolean   @default(false)
    teamId            String?   @db.Uuid
    userId            String?   @db.Uuid
    team              team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user              user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AccountStatus {
    Deleted
    Unlocked
    SoftLocked
    HardLocked
}

// enum AwardCategory {
//     AccountAnniversary
//     AccountNew
//     ApiCreate
//     CodeCreate
//     CommentCreate
//     IssueCreate
//     NoteCreate
//     ObjectBookmark
//     ObjectReact
//     PostCreate
//     ProjectCreate
//     PullRequestCreate
//     PullRequestComplete
//     QuestionAnswer
//     QuestionCreate
//     QuizPass
//     ReportEnd
//     ReportContribute
//     Reputation
//     RunRoutine
//     RunProject
//     RoutineCreate
//     StandardCreate
//     Streak
//     TeamCreate
//     TeamJoin
//     UserInvite
// }
enum AwardCategory {
    AccountAnniversary
    AccountNew
    ApiCreate
    CommentCreate
    IssueCreate
    NoteCreate
    ObjectBookmark
    ObjectReact
    OrganizationCreate
    OrganizationJoin
    PostCreate
    ProjectCreate
    PullRequestCreate
    PullRequestComplete
    QuestionAnswer
    QuestionCreate
    QuizPass
    ReportEnd
    ReportContribute
    Reputation
    RunRoutine
    RunProject
    RoutineCreate
    SmartContractCreate
    StandardCreate
    Streak
    UserInvite
}

enum ChatInviteStatus {
    Pending
    Accepted
    Declined
}

enum CodeType {
    DataConvert
    SmartContract
}

enum FocusModeFilterType {
    Blur
    Hide
    ShowMore
}

enum IssueStatus {
    Draft
    Open
    Canceled
    ClosedResolved
    ClosedUnresolved
    Rejected
}

enum MemberInviteStatus {
    Pending
    Accepted
    Declined
}

enum MeetingInviteStatus {
    Pending
    Accepted
    Declined
}

enum NodeType {
    End
    Redirect
    RoutineList
    Start
}

enum PaymentStatus {
    Pending
    Paid
    Failed
}

enum PaymentType {
    Credits
    Donation
    PremiumMonthly
    PremiumYearly
}

enum PeriodType {
    Hourly
    Daily
    Weekly
    Monthly
    Yearly
}

enum PullRequestStatus {
    Draft
    Open
    Canceled
    Merged
    Rejected
}

enum QuizAttemptStatus {
    NotStarted
    InProgress
    Passed
    Failed
}

enum ReportStatus {
    ClosedDeleted
    ClosedFalseReport
    ClosedHidden
    ClosedNonIssue
    ClosedSuspended
    Open
}

enum ReportSuggestedAction {
    Delete
    FalseReport
    HideUntilFixed
    NonIssue
    SuspendUser
}

enum ResourceUsedFor {
    Community
    Context
    Developer
    Donation
    ExternalService
    Feed
    Install
    Learning
    Notes
    OfficialWebsite
    Proposal
    Related
    Researching
    Scheduling
    Social
    Tutorial
}

enum RoutineType {
    Action
    Api
    Code
    Data
    Generate
    Informational
    MultiStep
    SmartContract
}

enum RunStatus {
    Scheduled
    InProgress
    Completed
    Failed
    Cancelled
}

enum RunStepStatus {
    InProgress
    Completed
    Skipped
}

enum ScheduleRecurrenceType {
    Daily
    Weekly
    Monthly
    Yearly
}

enum StandardType {
    DataStructure
    Prompt
}

enum TransferStatus {
    Accepted
    Denied
    Pending
}
