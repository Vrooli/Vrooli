import { SearchParams } from './schemas/base';

export enum SearchType {
    Api = 'Api',
    ApiVersion = 'ApiVersion',
    Bookmark = 'Bookmark',
    Comment = 'Comment',
    Issue = 'Issue',
    Label = 'Label',
    MeetingInvite = 'MeetingInvite',
    Meeting = 'Meeting',
    MemberInvite = 'MemberInvite',
    Member = 'Member',
    Note = 'Note',
    NoteVersion = 'NoteVersion',
    Notification = 'Notification',
    NotificationSubscription = 'NotificationSubscription',
    Organization = 'Organization',
    Post = 'Post',
    ProjectOrOrganization = 'ProjectOrOrganization',
    ProjectOrRoutine = 'ProjectOrRoutine',
    Project = 'Project',
    ProjectVersion = 'ProjectVersion',
    PullRequest = 'PullRequest',
    Question = 'Question',
    QuestionAnswer = 'QuestionAnswer',
    Quiz = 'Quiz',
    QuizAttempt = 'QuizAttempt',
    QuizQuestion = 'QuizQuestion',
    QuizQuestionResponse = 'QuizQuestionResponse',
    Reminder = 'Reminder',
    ReportResponse = 'ReportResponse',
    Report = 'Report',
    ReputationHistory = 'ReputationHistory',
    ResourceList = 'ResourceList',
    Resource = 'Resource',
    Role = 'Role',
    Routine = 'Routine',
    RoutineVersion = 'RoutineVersion',
    RunProject = 'RunProject',
    RunProjectOrRunRoutine = 'RunProjectOrRunRoutine',
    RunProjectSchedule = 'RunProjectSchedule',
    RunRoutine = 'RunRoutine',
    RunRoutineSchedule = 'RunRoutineSchedule',
    RunRoutineInput = 'RunRoutineInput',
    SmartContract = 'SmartContract',
    SmartContractVersion = 'SmartContractVersion',
    Standard = 'Standard',
    StandardVersion = 'StandardVersion',
    StatsApi = 'StatsApi',
    StatsOrganization = 'StatsOrganization',
    StatsProject = 'StatsProject',
    StatsQuiz = 'StatsQuiz',
    StatsRoutine = 'StatsRoutine',
    StatsSite = 'StatsSite',
    StatsSmartContract = 'StatsSmartContract',
    StatsStandard = 'StatsStandard',
    StatsUser = 'StatsUser',
    Tag = 'Tag',
    Transfer = 'Transfer',
    User = 'User',
    UserSchedule = 'UserSchedule',
    View = 'View',
    Vote = 'Vote',
}

export enum HistorySearchPageTabOption {
    Runs = 'Runs',
    Viewed = 'Viewed',
    Bookmarked = 'Bookmarked',
}

export enum SearchPageTabOption {
    Apis = 'Apis',
    Notes = 'Notes',
    Organizations = 'Organizations',
    Projects = 'Projects',
    Questions = 'Questions',
    Routines = 'Routines',
    SmartContracts = 'SmartContracts',
    Standards = 'Standards',
    Users = 'Users',
}


/**
 * Maps search types to values needed to query and display results
 */
export const searchTypeToParams: { [key in SearchType]: (lng: string) => Promise<SearchParams> } = {
    Api: async (lng) => (await import('./schemas/api')).apiSearchParams(lng),
    ApiVersion: async (lng) => (await import('./schemas/apiVersion')).apiVersionSearchParams(lng),
    Bookmark: async (lng) => (await import('./schemas/bookmark')).bookmarkSearchParams(lng),
    Comment: async (lng) => (await import('./schemas/comment')).commentSearchParams(lng),
    Issue: async (lng) => (await import('./schemas/issue')).issueSearchParams(lng),
    Label: async (lng) => (await import('./schemas/label')).labelSearchParams(lng),
    Meeting: async (lng) => (await import('./schemas/meeting')).meetingSearchParams(lng),
    MeetingInvite: async (lng) => (await import('./schemas/meetingInvite')).meetingInviteSearchParams(lng),
    Member: async (lng) => (await import('./schemas/member')).memberSearchParams(lng),
    MemberInvite: async (lng) => (await import('./schemas/memberInvite')).memberInviteSearchParams(lng),
    Note: async (lng) => (await import('./schemas/note')).noteSearchParams(lng),
    NoteVersion: async (lng) => (await import('./schemas/noteVersion')).noteVersionSearchParams(lng),
    Notification: async (lng) => (await import('./schemas/notification')).notificationSearchParams(lng),
    NotificationSubscription: async (lng) => (await import('./schemas/notificationSubscription')).notificationSubscriptionSearchParams(lng),
    Organization: async (lng) => (await import('./schemas/organization')).organizationSearchParams(lng),
    Post: async (lng) => (await import('./schemas/post')).postSearchParams(lng),
    Project: async (lng) => (await import('./schemas/project')).projectSearchParams(lng),
    ProjectOrOrganization: async (lng) => (await import('./schemas/projectOrOrganization')).projectOrOrganizationSearchParams(lng),
    ProjectOrRoutine: async (lng) => (await import('./schemas/projectOrRoutine')).projectOrRoutineSearchParams(lng),
    ProjectVersion: async (lng) => (await import('./schemas/projectVersion')).projectVersionSearchParams(lng),
    PullRequest: async (lng) => (await import('./schemas/pullRequest')).pullRequestSearchParams(lng),
    Question: async (lng) => (await import('./schemas/question')).questionSearchParams(lng),
    QuestionAnswer: async (lng) => (await import('./schemas/questionAnswer')).questionAnswerSearchParams(lng),
    Quiz: async (lng) => (await import('./schemas/quiz')).quizSearchParams(lng),
    QuizAttempt: async (lng) => (await import('./schemas/quizAttempt')).quizAttemptSearchParams(lng),
    QuizQuestion: async (lng) => (await import('./schemas/quizQuestion')).quizQuestionSearchParams(lng),
    QuizQuestionResponse: async (lng) => (await import('./schemas/quizQuestionResponse')).quizQuestionResponseSearchParams(lng),
    Reminder: async (lng) => (await import('./schemas/reminder')).reminderSearchParams(lng),
    Report: async (lng) => (await import('./schemas/report')).reportSearchParams(lng),
    ReportResponse: async (lng) => (await import('./schemas/reportResponse')).reportResponseSearchParams(lng),
    ReputationHistory: async (lng) => (await import('./schemas/reputationHistory')).reputationHistorySearchParams(lng),
    Resource: async (lng) => (await import('./schemas/resource')).resourceSearchParams(lng),
    ResourceList: async (lng) => (await import('./schemas/resourceList')).resourceListSearchParams(lng),
    Role: async (lng) => (await import('./schemas/role')).roleSearchParams(lng),
    Routine: async (lng) => (await import('./schemas/routine')).routineSearchParams(lng),
    RoutineVersion: async (lng) => (await import('./schemas/routineVersion')).routineVersionSearchParams(lng),
    RunProject: async (lng) => (await import('./schemas/runProject')).runProjectSearchParams(lng),
    RunProjectOrRunRoutine: async (lng) => (await import('./schemas/runProjectOrRunRoutine')).runProjectOrRunRoutineSearchParams(lng),
    RunProjectSchedule: async (lng) => (await import('./schemas/runProjectSchedule')).runProjectScheduleSearchParams(lng),
    RunRoutine: async (lng) => (await import('./schemas/runRoutine')).runRoutineSearchParams(lng),
    RunRoutineInput: async (lng) => (await import('./schemas/runRoutineInput')).runRoutineInputSearchParams(lng),
    RunRoutineSchedule: async (lng) => (await import('./schemas/runRoutineSchedule')).runRoutineScheduleSearchParams(lng),
    SmartContract: async (lng) => (await import('./schemas/smartContract')).smartContractSearchParams(lng),
    SmartContractVersion: async (lng) => (await import('./schemas/smartContractVersion')).smartContractVersionSearchParams(lng),
    Standard: async (lng) => (await import('./schemas/standard')).standardSearchParams(lng),
    StandardVersion: async (lng) => (await import('./schemas/standardVersion')).standardVersionSearchParams(lng),
    StatsApi: async (lng) => (await import('./schemas/statsApi')).statsApiSearchParams(lng),
    StatsOrganization: async (lng) => (await import('./schemas/statsOrganization')).statsOrganizationSearchParams(lng),
    StatsProject: async (lng) => (await import('./schemas/statsProject')).statsProjectSearchParams(lng),
    StatsQuiz: async (lng) => (await import('./schemas/statsQuiz')).statsQuizSearchParams(lng),
    StatsRoutine: async (lng) => (await import('./schemas/statsRoutine')).statsRoutineSearchParams(lng),
    StatsSite: async (lng) => (await import('./schemas/statsSite')).statsSiteSearchParams(lng),
    StatsSmartContract: async (lng) => (await import('./schemas/statsSmartContract')).statsSmartContractSearchParams(lng),
    StatsStandard: async (lng) => (await import('./schemas/statsStandard')).statsStandardSearchParams(lng),
    StatsUser: async (lng) => (await import('./schemas/statsUser')).statsUserSearchParams(lng),
    Tag: async (lng) => (await import('./schemas/tag')).tagSearchParams(lng),
    Transfer: async (lng) => (await import('./schemas/transfer')).transferSearchParams(lng),
    User: async (lng) => (await import('./schemas/user')).userSearchParams(lng),
    UserSchedule: async (lng) => (await import('./schemas/userSchedule')).userScheduleSearchParams(lng),
    View: async (lng) => (await import('./schemas/view')).viewSearchParams(lng),
    Vote: async (lng) => (await import('./schemas/vote')).voteSearchParams(lng),
};