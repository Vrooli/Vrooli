/**
 * This script converts the TypeScript types generated by GraphQL Code Generator to an OpenAPI schema,
 * since we use the GraphQL types for our REST API as well.
 * To run this script, run `ts-node --esm --experimental-specifier-resolution node ./src/tools/gqlToJson.ts` from the `packages/shared` directory.
 */
import * as fs from "fs";
import * as path from "path";
import { getOpenApiWriter, getTypeScriptReader, makeConverter } from "typeconv";
import { fileURLToPath } from "url";

const main = async () => {
    // Get the directory name of the current module
    const dirname = path.dirname(fileURLToPath(import.meta.url));

    const pathToTsFile = path.resolve(dirname, "../api/generated/graphqlTypes.ts");

    // Read the TypeScript file
    let tsData = fs.readFileSync(pathToTsFile, "utf8");

    // Split into blocks of types
    let blocks = tsData.split("\n\n");

    // Filter out blocks that start with "export type" followed by a word containing "Resolver". 
    // These are types which are only used internally by GraphQL, and are not used by the REST API.
    blocks = blocks.filter(block => {
        // Get the first line of code (excluding comments)
        const firstLineOfCode = block.split("\n").find(line => !line.trim().startsWith("//") && !line.trim().startsWith("/*") && line.trim().length > 0);
        return !firstLineOfCode?.match(/export type .*Resolver.*/);
    });

    // Define a Map to store the enums and their corresponding string unions
    const enumMap = new Map<string, string>();

    // Convert TypeScript enums to string unions
    tsData = tsData.replace(/export enum (\w+) \{([^}]+)\}/g, (match, enumName, enumBody) => {
        // Split the body of the enum into individual members
        const enumMembers = enumBody.split(",");

        // Map each member to its value (the part after the equals sign)
        const enumValues = enumMembers.map(member => {
            const parts = member.trim().split("=");
            return parts[1]?.trim() || parts[0]?.trim();
        });

        // Join the values into a union
        const union = enumValues.join(" | ");

        // Store the enum and its corresponding union in the map
        enumMap.set(enumName, union);

        // Return an empty string to remove the enum block
        return "";
    });

    // Remove enum blocks from the array of blocks
    blocks = blocks.filter(block => !block.startsWith("export enum "));

    // Replace enum usages with their corresponding unions
    blocks = blocks.map(block => {
        let replacedBlock = block;
        for (const [enumName, union] of enumMap.entries()) {
            const enumRegex = new RegExp(`\\b${enumName}\\b`, "g");
            replacedBlock = replacedBlock.replace(enumRegex, union);
        }
        return replacedBlock;
    });

    // Join the blocks back together
    tsData = blocks.join("\n\n");

    // Replace GraphQL's custom scalar types with TypeScript's built-in types
    tsData = tsData.replace(/Scalars\['[A-Za-z]+'\]/g, (match) => {
        // Includes all built-in types, and any additional custom types (typically defined in `root` GraphQL typeDef)
        switch (match) {
            case "Scalars['Boolean']":
                return "boolean";
            case "Scalars['Date']":
                return "string";
            case "Scalars['Float']":
                return "number";
            case "Scalars['ID']":
                return "string";
            case "Scalars['Int']":
                return "number";
            case "Scalars['String']":
                return "string";
            case "Scalars['Upload']":
                return "unknown";
            default:
                throw new Error(`Unknown scalar type: ${match}`);
        }
    });

    // Replace GraphQL's `InputMaybe<T>` and `Maybe<T>` with TypeScript's `T | null`
    tsData = tsData.replace(/InputMaybe<([^>]+)>/g, "$1 | null | undefined");
    tsData = tsData.replace(/Maybe<([^>]+)>/g, "$1 | null | undefined");

    //TODO for morning: generated types not correct. For example, ApiCreateInput.labelsConnect should be Array<string> | null, but is Array<string | null> instead. Also, nullable relations (not primitives) are not showing up in docs at all, meaning their generated type is invalid in some way. Also, enums are not showing up
    // For testing purposes, print every line containing "createdBy" to the console
    // tsData.split("\n").forEach((line) => {
    //     if (line.includes("createdBy")) {
    //         console.log(line);
    //     }
    // });

    // Create the reader and writer
    const reader = getTypeScriptReader();
    const writer = getOpenApiWriter({ format: "json", title: "Vrooli", version: "1.9.4" });

    // Create the converter
    const { convert } = makeConverter(reader, writer);

    // Convert the TypeScript types to OpenAPI
    const { data } = await convert({ data: tsData });

    // Write the OpenAPI schema to a file
    fs.writeFile(path.resolve(dirname, "../../../docs/docs/assets/openapi.json"), data, (err) => {
        if (err) throw err;
        console.log("The OpenAPI schema has been saved!");
    });
};

main().catch(console.error);
