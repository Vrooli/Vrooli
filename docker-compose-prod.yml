# Run this file by typing: docker-compose -f docker-compose-prod.yml up -d
version: "3.9"
services:
  ui:
    build:
      context: .
      dockerfile: ./packages/ui/Dockerfile-prod
      args:
        PROJECT_DIR: "${PROJECT_DIR}"
    container_name: ui
    image: ui:prod
    restart: always
    environment:
      NODE_ENV: "production"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_SERVER: ${PORT_SERVER}
      VITE_SERVER_URL: "${SERVER_URL}"
      VITE_SITE_IP: "${SITE_IP}"
      VITE_VAPID_PUBLIC_KEY: "${VAPID_PUBLIC_KEY}"
      VITE_STRIPE_PUBLISHABLE_KEY: "${STRIPE_PUBLISHABLE_KEY}"
      VITE_GOOGLE_ADSENSE_PUBLISHER_ID: "${GOOGLE_ADSENSE_PUBLISHER_ID}"
      VITE_GOOGLE_TRACKING_ID: "${GOOGLE_TRACKING_ID}"
      PROJECT_DIR: "${PROJECT_DIR}"
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      VIRTUAL_PATH: "/"
      VIRTUAL_PORT: ${PORT_UI}
      LETSENCRYPT_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
    ports:
      - ${PORT_UI}:${PORT_UI}
    networks:
      - proxy
      - app
    volumes:
      - ./packages/ui/dist:${PROJECT_DIR}/packages/ui/dist:z
    depends_on:
      - server
    command: /bin/sh -c "${PROJECT_DIR}/scripts/ui.sh"
  server:
    build:
      context: .
      dockerfile: ./packages/server/Dockerfile-prod
      args:
        PROJECT_DIR: "${PROJECT_DIR}"
    container_name: server
    image: server:prod
    restart: always
    environment:
      NODE_ENV: "production"
      PROJECT_DIR: "${PROJECT_DIR}"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_SERVER: ${PORT_SERVER}
      REDIS_CONN: "redis:${PORT_REDIS}"
      DB_USER: "${DB_USER}"
      CREATE_MOCK_DATA: "${CREATE_MOCK_DATA}"
      DB_PULL: "${DB_PULL}"
      SITE_EMAIL_FROM: "${SITE_EMAIL_FROM}"
      VAPID_PUBLIC_KEY: "${VAPID_PUBLIC_KEY}"
      SITE_EMAIL_USERNAME: "${SITE_EMAIL_USERNAME}"
      SITE_EMAIL_ALIAS: "${SITE_EMAIL_ALIAS}"
      SITE_IP: "${SITE_IP}"
      SERVER_URL: "${SERVER_URL}"
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      VIRTUAL_PORT: ${PORT_SERVER}
      VIRTUAL_PATH: "/api"
      LETSENCRYPT_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
    ports:
      - ${PORT_SERVER}:${PORT_SERVER}
    networks:
      - proxy
      - app
    volumes:
      - ./data/logs:${PROJECT_DIR}/data/logs:z
      - ./data/uploads:${PROJECT_DIR}/data/uploads:z
      - ./data/stats:${PROJECT_DIR}/data/stats:z
      - ./packages/ui/dist:${PROJECT_DIR}/packages/ui/dist:z
      - /run/secrets/vrooli/prod:/run/secrets/vrooli/prod
    depends_on:
      - redis
      - db
    command: /bin/sh -c "${PROJECT_DIR}/scripts/server.sh"
  db:
    image: ankane/pgvector:v0.4.1
    restart: always
    container_name: db
    environment:
      POSTGRES_USER: "${DB_USER}"
      PROJECT_DIR: "${PROJECT_DIR}"
    expose:
      - ${PORT_DB}
    networks:
      - app
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./packages/db/entrypoint:/docker-entrypoint-initdb.d
      - ./scripts:${PROJECT_DIR}/scripts
      - /run/secrets/vrooli/prod:/run/secrets/vrooli/prod
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: /bin/sh -c "${PROJECT_DIR}/scripts/getSecrets.sh production DB_PASSWORD && export POSTGRES_PASSWORD=${DB_PASSWORD} && exec docker-entrypoint.sh postgres"
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    networks:
      - app
    volumes:
      - ./data/redis:${PROJECT_DIR}/data/redis:z
      - ./scripts:${PROJECT_DIR}/scripts
    expose:
      - ${PORT_REDIS}
    command: /bin/sh -c "${PROJECT_DIR}/scripts/redis.sh"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  docs:
    build:
      context: ./packages/docs
      dockerfile: Dockerfile
    container_name: docs
    volumes:
      - ./packages/docs:/docs
    ports:
      - "${PORT_DOCS}:${PORT_DOCS}"
    networks:
      - proxy
      - app
    command: serve --dev-addr=0.0.0.0:${PORT_DOCS}
    environment:
      VIRTUAL_HOST: "${VIRTUAL_HOST_DOCS}"
      VIRTUAL_PORT: "${PORT_DOCS}"
      LETSENCRYPT_HOST: "${VIRTUAL_HOST_DOCS}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
networks:
  proxy:
    name: nginx-proxy
    external: true
  app:
    # LibreTranslate TODO add back when Kubernetes (or alternative) is setup. This is because it takes a lot of resources to start up and run.
    # translate:
    #   image: libretranslate/libretranslate:v1.2.9
    #   container_name: translate
    #   restart: always
    #   networks:
    #     - app
    #   expose:
    #     - ${PORT_TRANSLATE}
    # adminer:
    #     image: adminer
    #     restart: always
    #     depends_on:
    #         - db
    #     ports:
    #         - 8080:8080
    # TODO matomo and mariadb need to be added after kubernetes too
    # matomo:
    #   image: matomo
    #   restart: always
    #   links:
    #     - db
    #   volumes:
    #     - matomo:/var/www/html
    #   environment:
    #     - MATOMO_DATABASE_HOST=db
    #     - MATOMO_DATABASE_USERNAME=your_user
    #     - MATOMO_DATABASE_PASSWORD=your_password
    #     - MATOMO_DATABASE_DBNAME=matomo
    # db:
    #   image: mariadb
    #   restart: always
    #   volumes:
    #     - db:/var/lib/mysql
    #   environment:
    #     - MYSQL_ROOT_PASSWORD=your_root_password
    #     - MYSQL_USER=your_user
    #     - MYSQL_PASSWORD=your_password
    #     - MYSQL_DATABASE=matomo
