name: Development VPS Deployment

on:
  push:
    branches: [dev]
  workflow_dispatch:

# Limit concurrent deployments to one per branch/environment
concurrency:
  group: dev-${{ github.ref }}
  cancel-in-progress: false

# Limit permissions to only what's needed
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true # Allow deployment to continue even if tests fail
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Install Bats Testing Framework
        run: npm install -g bats

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Tests in Workspaces
        run: |
          yarn workspace @local/shared test && \
          yarn workspace @local/server test && \
          yarn workspace @local/jobs test && \
          yarn workspace @local/ui test

      - name: Run Bash Script Tests
        run: ./scripts/tests/__runTests.sh

  deploy:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: development
    outputs:
      build_version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Create .env-dev file from secret
        run: echo "${{ secrets.ENV_DEV_FILE }}" > .env-dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build application
        id: set_version
        run: |
          # Set version with timestamp
          VERSION=$(cat package.json | jq -r .version)-dev-$(date +%Y%m%d%H%M%S)
          # Run build script with development env file
          ./scripts/build.sh -v "$VERSION" -p n -t n -u n -d n
          # Set output for other jobs to use
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Also set env var for this job's remaining steps
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}

      - name: Deploy to Development VPS
        env:
          DEV_VPS_HOST: ${{ secrets.DEV_VPS_HOST }}
          DEV_VPS_USER: ${{ secrets.DEV_VPS_USER }}
          DEPLOY_PATH: "/root/Vrooli"
        run: |
          # Add VPS host to known_hosts
          ssh-keyscan -H "$DEV_VPS_HOST" >> ~/.ssh/known_hosts

          # Create temp directory for build artifacts
          BUILD_DIR="/var/tmp/${{ env.BUILD_VERSION }}"
          ssh "$DEV_VPS_USER@$DEV_VPS_HOST" "mkdir -p '$BUILD_DIR'"

          # Copy build artifacts to VPS
          scp "/var/tmp/${{ env.BUILD_VERSION }}/build.tar.gz" "$DEV_VPS_USER@$DEV_VPS_HOST:$BUILD_DIR/"
          scp "/var/tmp/${{ env.BUILD_VERSION }}/production-docker-images.tar.gz" "$DEV_VPS_USER@$DEV_VPS_HOST:$BUILD_DIR/"
          scp "/var/tmp/${{ env.BUILD_VERSION }}/.env-dev" "$DEV_VPS_USER@$DEV_VPS_HOST:$BUILD_DIR/"

          # Update git repo on server and deploy
          ssh "$DEV_VPS_USER@$DEV_VPS_HOST" "cd '$DEPLOY_PATH' && \
            git fetch && \
            git pull origin development && \
            cp '$BUILD_DIR/.env-dev' .env-dev && \
            ./scripts/deploy.sh -v '${{ env.BUILD_VERSION }}' -c -y -p n -y"

          # Verify API health check after deployment
          echo "Waiting 30 seconds for services to start..."
          sleep 30
          if ! curl -s -f -o /dev/null "${{ secrets.DEV_API_URL }}/healthcheck"; then
            echo "Deployment verification failed"
            exit 1
          fi
          echo "Deployment verified successfully"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify on success
        if: ${{ needs.deploy.result == 'success' }}
        shell: bash
        run: |
          set +x # Don't print commands to prevent leaking webhook URL
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ Successfully deployed version ${{ needs.deploy.outputs.build_version }} to development VPS"}' \
            "${{ secrets.NOTIFICATION_WEBHOOK_URL }}" || echo "Deployment to development VPS completed successfully"

      - name: Notify on failure
        if: ${{ needs.deploy.result != 'success' }}
        shell: bash
        run: |
          set +x # Don't print commands to prevent leaking webhook URL
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"❌ Failed to deploy version ${{ needs.deploy.outputs.build_version }} to development VPS"}' \
            "${{ secrets.NOTIFICATION_WEBHOOK_URL }}" || echo "Deployment to development VPS failed"
