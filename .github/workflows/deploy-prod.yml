name: VPS Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      - name: Build application
        run: |
          # Set production version
          VERSION=$(cat package.json | jq -r .version)
          # Run build script for production
          ./scripts/build.sh -v $VERSION -t y
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Add VPS host to known_hosts
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts

          # Create temp directory for build artifacts
          BUILD_DIR="/var/tmp/${{ env.BUILD_VERSION }}"
          ssh $VPS_USERNAME@$VPS_HOST "mkdir -p $BUILD_DIR"

          # Copy build artifacts to VPS
          scp /var/tmp/${{ env.BUILD_VERSION }}/build.tar.gz $VPS_USERNAME@$VPS_HOST:$BUILD_DIR/
          scp /var/tmp/${{ env.BUILD_VERSION }}/production-docker-images.tar.gz $VPS_USERNAME@$VPS_HOST:$BUILD_DIR/
          scp /var/tmp/${{ env.BUILD_VERSION }}/.env-prod $VPS_USERNAME@$VPS_HOST:$BUILD_DIR/

          # Update git repo on server and deploy
          ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && \
            git fetch && \
            git pull origin main && \
            cp $BUILD_DIR/.env-prod .env-prod && \
            ./scripts/deploy.sh -v ${{ env.BUILD_VERSION }} -c -y"

          # Verify deployment status
          ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && docker-compose -f docker-compose-prod.yml ps"

          # Wait and verify API health
          sleep 30
          curl -s -f -o /dev/null https://${{ secrets.PROD_DOMAIN }}/healthcheck || { echo "Deployment verification failed"; exit 1; }

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify on success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ Successfully deployed version ${{ env.BUILD_VERSION }} to production"}' \
            ${{ secrets.NOTIFICATION_WEBHOOK_URL }} || echo "Deployment to production completed successfully"

      - name: Notify on failure
        if: ${{ needs.deploy.result != 'success' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"❌ Failed to deploy version ${{ env.BUILD_VERSION }} to production"}' \
            ${{ secrets.NOTIFICATION_WEBHOOK_URL }} || echo "Deployment to production failed"
